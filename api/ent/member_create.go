// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management/ent/member"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberCreate is the builder for creating a Member entity.
type MemberCreate struct {
	config
	mutation *MemberMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (mc *MemberCreate) SetName(s string) *MemberCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetLevel sets the "level" field.
func (mc *MemberCreate) SetLevel(m member.Level) *MemberCreate {
	mc.mutation.SetLevel(m)
	return mc
}

// SetPositions sets the "positions" field.
func (mc *MemberCreate) SetPositions(s string) *MemberCreate {
	mc.mutation.SetPositions(s)
	return mc
}

// SetKpi sets the "kpi" field.
func (mc *MemberCreate) SetKpi(f float32) *MemberCreate {
	mc.mutation.SetKpi(f)
	return mc
}

// SetCategory sets the "category" field.
func (mc *MemberCreate) SetCategory(m member.Category) *MemberCreate {
	mc.mutation.SetCategory(m)
	return mc
}

// SetTotalEffort sets the "total_effort" field.
func (mc *MemberCreate) SetTotalEffort(f float32) *MemberCreate {
	mc.mutation.SetTotalEffort(f)
	return mc
}

// SetStartDate sets the "start_date" field.
func (mc *MemberCreate) SetStartDate(t time.Time) *MemberCreate {
	mc.mutation.SetStartDate(t)
	return mc
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (mc *MemberCreate) SetNillableStartDate(t *time.Time) *MemberCreate {
	if t != nil {
		mc.SetStartDate(*t)
	}
	return mc
}

// SetEndDate sets the "end_date" field.
func (mc *MemberCreate) SetEndDate(t time.Time) *MemberCreate {
	mc.mutation.SetEndDate(t)
	return mc
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (mc *MemberCreate) SetNillableEndDate(t *time.Time) *MemberCreate {
	if t != nil {
		mc.SetEndDate(*t)
	}
	return mc
}

// SetStatus sets the "status" field.
func (mc *MemberCreate) SetStatus(m member.Status) *MemberCreate {
	mc.mutation.SetStatus(m)
	return mc
}

// SetID sets the "id" field.
func (mc *MemberCreate) SetID(i int32) *MemberCreate {
	mc.mutation.SetID(i)
	return mc
}

// Mutation returns the MemberMutation object of the builder.
func (mc *MemberCreate) Mutation() *MemberMutation {
	return mc.mutation
}

// Save creates the Member in the database.
func (mc *MemberCreate) Save(ctx context.Context) (*Member, error) {
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MemberCreate) SaveX(ctx context.Context) *Member {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MemberCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MemberCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MemberCreate) check() error {
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Member.name"`)}
	}
	if _, ok := mc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "Member.level"`)}
	}
	if v, ok := mc.mutation.Level(); ok {
		if err := member.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "Member.level": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Positions(); !ok {
		return &ValidationError{Name: "positions", err: errors.New(`ent: missing required field "Member.positions"`)}
	}
	if _, ok := mc.mutation.Kpi(); !ok {
		return &ValidationError{Name: "kpi", err: errors.New(`ent: missing required field "Member.kpi"`)}
	}
	if v, ok := mc.mutation.Kpi(); ok {
		if err := member.KpiValidator(v); err != nil {
			return &ValidationError{Name: "kpi", err: fmt.Errorf(`ent: validator failed for field "Member.kpi": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "Member.category"`)}
	}
	if v, ok := mc.mutation.Category(); ok {
		if err := member.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Member.category": %w`, err)}
		}
	}
	if _, ok := mc.mutation.TotalEffort(); !ok {
		return &ValidationError{Name: "total_effort", err: errors.New(`ent: missing required field "Member.total_effort"`)}
	}
	if v, ok := mc.mutation.TotalEffort(); ok {
		if err := member.TotalEffortValidator(v); err != nil {
			return &ValidationError{Name: "total_effort", err: fmt.Errorf(`ent: validator failed for field "Member.total_effort": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Member.status"`)}
	}
	if v, ok := mc.mutation.Status(); ok {
		if err := member.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Member.status": %w`, err)}
		}
	}
	return nil
}

func (mc *MemberCreate) sqlSave(ctx context.Context) (*Member, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MemberCreate) createSpec() (*Member, *sqlgraph.CreateSpec) {
	var (
		_node = &Member{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(member.Table, sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt32))
	)
	_spec.OnConflict = mc.conflict
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.SetField(member.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mc.mutation.Level(); ok {
		_spec.SetField(member.FieldLevel, field.TypeEnum, value)
		_node.Level = value
	}
	if value, ok := mc.mutation.Positions(); ok {
		_spec.SetField(member.FieldPositions, field.TypeString, value)
		_node.Positions = value
	}
	if value, ok := mc.mutation.Kpi(); ok {
		_spec.SetField(member.FieldKpi, field.TypeFloat32, value)
		_node.Kpi = value
	}
	if value, ok := mc.mutation.Category(); ok {
		_spec.SetField(member.FieldCategory, field.TypeEnum, value)
		_node.Category = value
	}
	if value, ok := mc.mutation.TotalEffort(); ok {
		_spec.SetField(member.FieldTotalEffort, field.TypeFloat32, value)
		_node.TotalEffort = value
	}
	if value, ok := mc.mutation.StartDate(); ok {
		_spec.SetField(member.FieldStartDate, field.TypeTime, value)
		_node.StartDate = &value
	}
	if value, ok := mc.mutation.EndDate(); ok {
		_spec.SetField(member.FieldEndDate, field.TypeTime, value)
		_node.EndDate = &value
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.SetField(member.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Member.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MemberUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (mc *MemberCreate) OnConflict(opts ...sql.ConflictOption) *MemberUpsertOne {
	mc.conflict = opts
	return &MemberUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Member.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MemberCreate) OnConflictColumns(columns ...string) *MemberUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MemberUpsertOne{
		create: mc,
	}
}

type (
	// MemberUpsertOne is the builder for "upsert"-ing
	//  one Member node.
	MemberUpsertOne struct {
		create *MemberCreate
	}

	// MemberUpsert is the "OnConflict" setter.
	MemberUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *MemberUpsert) SetName(v string) *MemberUpsert {
	u.Set(member.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MemberUpsert) UpdateName() *MemberUpsert {
	u.SetExcluded(member.FieldName)
	return u
}

// SetLevel sets the "level" field.
func (u *MemberUpsert) SetLevel(v member.Level) *MemberUpsert {
	u.Set(member.FieldLevel, v)
	return u
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *MemberUpsert) UpdateLevel() *MemberUpsert {
	u.SetExcluded(member.FieldLevel)
	return u
}

// SetPositions sets the "positions" field.
func (u *MemberUpsert) SetPositions(v string) *MemberUpsert {
	u.Set(member.FieldPositions, v)
	return u
}

// UpdatePositions sets the "positions" field to the value that was provided on create.
func (u *MemberUpsert) UpdatePositions() *MemberUpsert {
	u.SetExcluded(member.FieldPositions)
	return u
}

// SetKpi sets the "kpi" field.
func (u *MemberUpsert) SetKpi(v float32) *MemberUpsert {
	u.Set(member.FieldKpi, v)
	return u
}

// UpdateKpi sets the "kpi" field to the value that was provided on create.
func (u *MemberUpsert) UpdateKpi() *MemberUpsert {
	u.SetExcluded(member.FieldKpi)
	return u
}

// AddKpi adds v to the "kpi" field.
func (u *MemberUpsert) AddKpi(v float32) *MemberUpsert {
	u.Add(member.FieldKpi, v)
	return u
}

// SetCategory sets the "category" field.
func (u *MemberUpsert) SetCategory(v member.Category) *MemberUpsert {
	u.Set(member.FieldCategory, v)
	return u
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *MemberUpsert) UpdateCategory() *MemberUpsert {
	u.SetExcluded(member.FieldCategory)
	return u
}

// SetTotalEffort sets the "total_effort" field.
func (u *MemberUpsert) SetTotalEffort(v float32) *MemberUpsert {
	u.Set(member.FieldTotalEffort, v)
	return u
}

// UpdateTotalEffort sets the "total_effort" field to the value that was provided on create.
func (u *MemberUpsert) UpdateTotalEffort() *MemberUpsert {
	u.SetExcluded(member.FieldTotalEffort)
	return u
}

// AddTotalEffort adds v to the "total_effort" field.
func (u *MemberUpsert) AddTotalEffort(v float32) *MemberUpsert {
	u.Add(member.FieldTotalEffort, v)
	return u
}

// SetStartDate sets the "start_date" field.
func (u *MemberUpsert) SetStartDate(v time.Time) *MemberUpsert {
	u.Set(member.FieldStartDate, v)
	return u
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *MemberUpsert) UpdateStartDate() *MemberUpsert {
	u.SetExcluded(member.FieldStartDate)
	return u
}

// ClearStartDate clears the value of the "start_date" field.
func (u *MemberUpsert) ClearStartDate() *MemberUpsert {
	u.SetNull(member.FieldStartDate)
	return u
}

// SetEndDate sets the "end_date" field.
func (u *MemberUpsert) SetEndDate(v time.Time) *MemberUpsert {
	u.Set(member.FieldEndDate, v)
	return u
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *MemberUpsert) UpdateEndDate() *MemberUpsert {
	u.SetExcluded(member.FieldEndDate)
	return u
}

// ClearEndDate clears the value of the "end_date" field.
func (u *MemberUpsert) ClearEndDate() *MemberUpsert {
	u.SetNull(member.FieldEndDate)
	return u
}

// SetStatus sets the "status" field.
func (u *MemberUpsert) SetStatus(v member.Status) *MemberUpsert {
	u.Set(member.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MemberUpsert) UpdateStatus() *MemberUpsert {
	u.SetExcluded(member.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Member.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(member.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MemberUpsertOne) UpdateNewValues() *MemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(member.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Member.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MemberUpsertOne) Ignore() *MemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MemberUpsertOne) DoNothing() *MemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MemberCreate.OnConflict
// documentation for more info.
func (u *MemberUpsertOne) Update(set func(*MemberUpsert)) *MemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MemberUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *MemberUpsertOne) SetName(v string) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MemberUpsertOne) UpdateName() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateName()
	})
}

// SetLevel sets the "level" field.
func (u *MemberUpsertOne) SetLevel(v member.Level) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.SetLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *MemberUpsertOne) UpdateLevel() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateLevel()
	})
}

// SetPositions sets the "positions" field.
func (u *MemberUpsertOne) SetPositions(v string) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.SetPositions(v)
	})
}

// UpdatePositions sets the "positions" field to the value that was provided on create.
func (u *MemberUpsertOne) UpdatePositions() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.UpdatePositions()
	})
}

// SetKpi sets the "kpi" field.
func (u *MemberUpsertOne) SetKpi(v float32) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.SetKpi(v)
	})
}

// AddKpi adds v to the "kpi" field.
func (u *MemberUpsertOne) AddKpi(v float32) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.AddKpi(v)
	})
}

// UpdateKpi sets the "kpi" field to the value that was provided on create.
func (u *MemberUpsertOne) UpdateKpi() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateKpi()
	})
}

// SetCategory sets the "category" field.
func (u *MemberUpsertOne) SetCategory(v member.Category) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *MemberUpsertOne) UpdateCategory() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateCategory()
	})
}

// SetTotalEffort sets the "total_effort" field.
func (u *MemberUpsertOne) SetTotalEffort(v float32) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.SetTotalEffort(v)
	})
}

// AddTotalEffort adds v to the "total_effort" field.
func (u *MemberUpsertOne) AddTotalEffort(v float32) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.AddTotalEffort(v)
	})
}

// UpdateTotalEffort sets the "total_effort" field to the value that was provided on create.
func (u *MemberUpsertOne) UpdateTotalEffort() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateTotalEffort()
	})
}

// SetStartDate sets the "start_date" field.
func (u *MemberUpsertOne) SetStartDate(v time.Time) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *MemberUpsertOne) UpdateStartDate() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateStartDate()
	})
}

// ClearStartDate clears the value of the "start_date" field.
func (u *MemberUpsertOne) ClearStartDate() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.ClearStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *MemberUpsertOne) SetEndDate(v time.Time) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *MemberUpsertOne) UpdateEndDate() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateEndDate()
	})
}

// ClearEndDate clears the value of the "end_date" field.
func (u *MemberUpsertOne) ClearEndDate() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.ClearEndDate()
	})
}

// SetStatus sets the "status" field.
func (u *MemberUpsertOne) SetStatus(v member.Status) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MemberUpsertOne) UpdateStatus() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *MemberUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MemberCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MemberUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MemberUpsertOne) ID(ctx context.Context) (id int32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MemberUpsertOne) IDX(ctx context.Context) int32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MemberCreateBulk is the builder for creating many Member entities in bulk.
type MemberCreateBulk struct {
	config
	err      error
	builders []*MemberCreate
	conflict []sql.ConflictOption
}

// Save creates the Member entities in the database.
func (mcb *MemberCreateBulk) Save(ctx context.Context) ([]*Member, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Member, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MemberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MemberCreateBulk) SaveX(ctx context.Context) []*Member {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MemberCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MemberCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Member.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MemberUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (mcb *MemberCreateBulk) OnConflict(opts ...sql.ConflictOption) *MemberUpsertBulk {
	mcb.conflict = opts
	return &MemberUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Member.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MemberCreateBulk) OnConflictColumns(columns ...string) *MemberUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MemberUpsertBulk{
		create: mcb,
	}
}

// MemberUpsertBulk is the builder for "upsert"-ing
// a bulk of Member nodes.
type MemberUpsertBulk struct {
	create *MemberCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Member.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(member.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MemberUpsertBulk) UpdateNewValues() *MemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(member.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Member.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MemberUpsertBulk) Ignore() *MemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MemberUpsertBulk) DoNothing() *MemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MemberCreateBulk.OnConflict
// documentation for more info.
func (u *MemberUpsertBulk) Update(set func(*MemberUpsert)) *MemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MemberUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *MemberUpsertBulk) SetName(v string) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MemberUpsertBulk) UpdateName() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateName()
	})
}

// SetLevel sets the "level" field.
func (u *MemberUpsertBulk) SetLevel(v member.Level) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.SetLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *MemberUpsertBulk) UpdateLevel() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateLevel()
	})
}

// SetPositions sets the "positions" field.
func (u *MemberUpsertBulk) SetPositions(v string) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.SetPositions(v)
	})
}

// UpdatePositions sets the "positions" field to the value that was provided on create.
func (u *MemberUpsertBulk) UpdatePositions() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.UpdatePositions()
	})
}

// SetKpi sets the "kpi" field.
func (u *MemberUpsertBulk) SetKpi(v float32) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.SetKpi(v)
	})
}

// AddKpi adds v to the "kpi" field.
func (u *MemberUpsertBulk) AddKpi(v float32) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.AddKpi(v)
	})
}

// UpdateKpi sets the "kpi" field to the value that was provided on create.
func (u *MemberUpsertBulk) UpdateKpi() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateKpi()
	})
}

// SetCategory sets the "category" field.
func (u *MemberUpsertBulk) SetCategory(v member.Category) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *MemberUpsertBulk) UpdateCategory() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateCategory()
	})
}

// SetTotalEffort sets the "total_effort" field.
func (u *MemberUpsertBulk) SetTotalEffort(v float32) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.SetTotalEffort(v)
	})
}

// AddTotalEffort adds v to the "total_effort" field.
func (u *MemberUpsertBulk) AddTotalEffort(v float32) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.AddTotalEffort(v)
	})
}

// UpdateTotalEffort sets the "total_effort" field to the value that was provided on create.
func (u *MemberUpsertBulk) UpdateTotalEffort() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateTotalEffort()
	})
}

// SetStartDate sets the "start_date" field.
func (u *MemberUpsertBulk) SetStartDate(v time.Time) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *MemberUpsertBulk) UpdateStartDate() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateStartDate()
	})
}

// ClearStartDate clears the value of the "start_date" field.
func (u *MemberUpsertBulk) ClearStartDate() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.ClearStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *MemberUpsertBulk) SetEndDate(v time.Time) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *MemberUpsertBulk) UpdateEndDate() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateEndDate()
	})
}

// ClearEndDate clears the value of the "end_date" field.
func (u *MemberUpsertBulk) ClearEndDate() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.ClearEndDate()
	})
}

// SetStatus sets the "status" field.
func (u *MemberUpsertBulk) SetStatus(v member.Status) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MemberUpsertBulk) UpdateStatus() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *MemberUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MemberCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MemberCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MemberUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
