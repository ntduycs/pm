// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"project-management/ent/member"
	"project-management/ent/papc"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PaPc is the model entity for the PaPc schema.
type PaPc struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MemberID holds the value of the "member_id" field.
	MemberID int `json:"member_id,omitempty"`
	// TechnicalScore holds the value of the "technical_score" field.
	TechnicalScore float32 `json:"technical_score,omitempty"`
	// ProductivityScore holds the value of the "productivity_score" field.
	ProductivityScore float32 `json:"productivity_score,omitempty"`
	// CollaborationScore holds the value of the "collaboration_score" field.
	CollaborationScore float32 `json:"collaboration_score,omitempty"`
	// DevelopmentScore holds the value of the "development_score" field.
	DevelopmentScore float32 `json:"development_score,omitempty"`
	// Period holds the value of the "period" field.
	Period string `json:"period,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PaPcQuery when eager-loading is set.
	Edges        PaPcEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PaPcEdges holds the relations/edges for other nodes in the graph.
type PaPcEdges struct {
	// Member holds the value of the member edge.
	Member *Member `json:"member,omitempty"`
	// TechnicalScoreDetails holds the value of the technical_score_details edge.
	TechnicalScoreDetails []*PaPcTechnicalScore `json:"technical_score_details,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MemberOrErr returns the Member value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaPcEdges) MemberOrErr() (*Member, error) {
	if e.loadedTypes[0] {
		if e.Member == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: member.Label}
		}
		return e.Member, nil
	}
	return nil, &NotLoadedError{edge: "member"}
}

// TechnicalScoreDetailsOrErr returns the TechnicalScoreDetails value or an error if the edge
// was not loaded in eager-loading.
func (e PaPcEdges) TechnicalScoreDetailsOrErr() ([]*PaPcTechnicalScore, error) {
	if e.loadedTypes[1] {
		return e.TechnicalScoreDetails, nil
	}
	return nil, &NotLoadedError{edge: "technical_score_details"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaPc) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case papc.FieldTechnicalScore, papc.FieldProductivityScore, papc.FieldCollaborationScore, papc.FieldDevelopmentScore:
			values[i] = new(sql.NullFloat64)
		case papc.FieldID, papc.FieldMemberID:
			values[i] = new(sql.NullInt64)
		case papc.FieldPeriod, papc.FieldNote:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaPc fields.
func (pp *PaPc) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case papc.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pp.ID = int(value.Int64)
		case papc.FieldMemberID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field member_id", values[i])
			} else if value.Valid {
				pp.MemberID = int(value.Int64)
			}
		case papc.FieldTechnicalScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field technical_score", values[i])
			} else if value.Valid {
				pp.TechnicalScore = float32(value.Float64)
			}
		case papc.FieldProductivityScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field productivity_score", values[i])
			} else if value.Valid {
				pp.ProductivityScore = float32(value.Float64)
			}
		case papc.FieldCollaborationScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field collaboration_score", values[i])
			} else if value.Valid {
				pp.CollaborationScore = float32(value.Float64)
			}
		case papc.FieldDevelopmentScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field development_score", values[i])
			} else if value.Valid {
				pp.DevelopmentScore = float32(value.Float64)
			}
		case papc.FieldPeriod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field period", values[i])
			} else if value.Valid {
				pp.Period = value.String
			}
		case papc.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				pp.Note = value.String
			}
		default:
			pp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PaPc.
// This includes values selected through modifiers, order, etc.
func (pp *PaPc) Value(name string) (ent.Value, error) {
	return pp.selectValues.Get(name)
}

// QueryMember queries the "member" edge of the PaPc entity.
func (pp *PaPc) QueryMember() *MemberQuery {
	return NewPaPcClient(pp.config).QueryMember(pp)
}

// QueryTechnicalScoreDetails queries the "technical_score_details" edge of the PaPc entity.
func (pp *PaPc) QueryTechnicalScoreDetails() *PaPcTechnicalScoreQuery {
	return NewPaPcClient(pp.config).QueryTechnicalScoreDetails(pp)
}

// Update returns a builder for updating this PaPc.
// Note that you need to call PaPc.Unwrap() before calling this method if this PaPc
// was returned from a transaction, and the transaction was committed or rolled back.
func (pp *PaPc) Update() *PaPcUpdateOne {
	return NewPaPcClient(pp.config).UpdateOne(pp)
}

// Unwrap unwraps the PaPc entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pp *PaPc) Unwrap() *PaPc {
	_tx, ok := pp.config.driver.(*txDriver)
	if !ok {
		panic("ent: PaPc is not a transactional entity")
	}
	pp.config.driver = _tx.drv
	return pp
}

// String implements the fmt.Stringer.
func (pp *PaPc) String() string {
	var builder strings.Builder
	builder.WriteString("PaPc(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pp.ID))
	builder.WriteString("member_id=")
	builder.WriteString(fmt.Sprintf("%v", pp.MemberID))
	builder.WriteString(", ")
	builder.WriteString("technical_score=")
	builder.WriteString(fmt.Sprintf("%v", pp.TechnicalScore))
	builder.WriteString(", ")
	builder.WriteString("productivity_score=")
	builder.WriteString(fmt.Sprintf("%v", pp.ProductivityScore))
	builder.WriteString(", ")
	builder.WriteString("collaboration_score=")
	builder.WriteString(fmt.Sprintf("%v", pp.CollaborationScore))
	builder.WriteString(", ")
	builder.WriteString("development_score=")
	builder.WriteString(fmt.Sprintf("%v", pp.DevelopmentScore))
	builder.WriteString(", ")
	builder.WriteString("period=")
	builder.WriteString(pp.Period)
	builder.WriteString(", ")
	builder.WriteString("note=")
	builder.WriteString(pp.Note)
	builder.WriteByte(')')
	return builder.String()
}

// PaPcs is a parsable slice of PaPc.
type PaPcs []*PaPc
