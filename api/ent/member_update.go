// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management/ent/member"
	"project-management/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberUpdate is the builder for updating Member entities.
type MemberUpdate struct {
	config
	hooks    []Hook
	mutation *MemberMutation
}

// Where appends a list predicates to the MemberUpdate builder.
func (mu *MemberUpdate) Where(ps ...predicate.Member) *MemberUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetEmail sets the "email" field.
func (mu *MemberUpdate) SetEmail(s string) *MemberUpdate {
	mu.mutation.SetEmail(s)
	return mu
}

// SetName sets the "name" field.
func (mu *MemberUpdate) SetName(s string) *MemberUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetLevel sets the "level" field.
func (mu *MemberUpdate) SetLevel(i int) *MemberUpdate {
	mu.mutation.ResetLevel()
	mu.mutation.SetLevel(i)
	return mu
}

// AddLevel adds i to the "level" field.
func (mu *MemberUpdate) AddLevel(i int) *MemberUpdate {
	mu.mutation.AddLevel(i)
	return mu
}

// SetPositions sets the "positions" field.
func (mu *MemberUpdate) SetPositions(s string) *MemberUpdate {
	mu.mutation.SetPositions(s)
	return mu
}

// SetKpi sets the "kpi" field.
func (mu *MemberUpdate) SetKpi(i int) *MemberUpdate {
	mu.mutation.ResetKpi()
	mu.mutation.SetKpi(i)
	return mu
}

// AddKpi adds i to the "kpi" field.
func (mu *MemberUpdate) AddKpi(i int) *MemberUpdate {
	mu.mutation.AddKpi(i)
	return mu
}

// SetCategory sets the "category" field.
func (mu *MemberUpdate) SetCategory(m member.Category) *MemberUpdate {
	mu.mutation.SetCategory(m)
	return mu
}

// SetTotalEffort sets the "total_effort" field.
func (mu *MemberUpdate) SetTotalEffort(f float32) *MemberUpdate {
	mu.mutation.ResetTotalEffort()
	mu.mutation.SetTotalEffort(f)
	return mu
}

// AddTotalEffort adds f to the "total_effort" field.
func (mu *MemberUpdate) AddTotalEffort(f float32) *MemberUpdate {
	mu.mutation.AddTotalEffort(f)
	return mu
}

// SetStartDate sets the "start_date" field.
func (mu *MemberUpdate) SetStartDate(t time.Time) *MemberUpdate {
	mu.mutation.SetStartDate(t)
	return mu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableStartDate(t *time.Time) *MemberUpdate {
	if t != nil {
		mu.SetStartDate(*t)
	}
	return mu
}

// ClearStartDate clears the value of the "start_date" field.
func (mu *MemberUpdate) ClearStartDate() *MemberUpdate {
	mu.mutation.ClearStartDate()
	return mu
}

// SetEndDate sets the "end_date" field.
func (mu *MemberUpdate) SetEndDate(t time.Time) *MemberUpdate {
	mu.mutation.SetEndDate(t)
	return mu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableEndDate(t *time.Time) *MemberUpdate {
	if t != nil {
		mu.SetEndDate(*t)
	}
	return mu
}

// ClearEndDate clears the value of the "end_date" field.
func (mu *MemberUpdate) ClearEndDate() *MemberUpdate {
	mu.mutation.ClearEndDate()
	return mu
}

// SetStatus sets the "status" field.
func (mu *MemberUpdate) SetStatus(m member.Status) *MemberUpdate {
	mu.mutation.SetStatus(m)
	return mu
}

// Mutation returns the MemberMutation object of the builder.
func (mu *MemberUpdate) Mutation() *MemberMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MemberUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MemberUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MemberUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MemberUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MemberUpdate) check() error {
	if v, ok := mu.mutation.Email(); ok {
		if err := member.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Member.email": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Level(); ok {
		if err := member.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "Member.level": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Kpi(); ok {
		if err := member.KpiValidator(v); err != nil {
			return &ValidationError{Name: "kpi", err: fmt.Errorf(`ent: validator failed for field "Member.kpi": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Category(); ok {
		if err := member.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Member.category": %w`, err)}
		}
	}
	if v, ok := mu.mutation.TotalEffort(); ok {
		if err := member.TotalEffortValidator(v); err != nil {
			return &ValidationError{Name: "total_effort", err: fmt.Errorf(`ent: validator failed for field "Member.total_effort": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Status(); ok {
		if err := member.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Member.status": %w`, err)}
		}
	}
	return nil
}

func (mu *MemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(member.Table, member.Columns, sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Email(); ok {
		_spec.SetField(member.FieldEmail, field.TypeString, value)
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(member.FieldName, field.TypeString, value)
	}
	if value, ok := mu.mutation.Level(); ok {
		_spec.SetField(member.FieldLevel, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedLevel(); ok {
		_spec.AddField(member.FieldLevel, field.TypeInt, value)
	}
	if value, ok := mu.mutation.Positions(); ok {
		_spec.SetField(member.FieldPositions, field.TypeString, value)
	}
	if value, ok := mu.mutation.Kpi(); ok {
		_spec.SetField(member.FieldKpi, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedKpi(); ok {
		_spec.AddField(member.FieldKpi, field.TypeInt, value)
	}
	if value, ok := mu.mutation.Category(); ok {
		_spec.SetField(member.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := mu.mutation.TotalEffort(); ok {
		_spec.SetField(member.FieldTotalEffort, field.TypeFloat32, value)
	}
	if value, ok := mu.mutation.AddedTotalEffort(); ok {
		_spec.AddField(member.FieldTotalEffort, field.TypeFloat32, value)
	}
	if value, ok := mu.mutation.StartDate(); ok {
		_spec.SetField(member.FieldStartDate, field.TypeTime, value)
	}
	if mu.mutation.StartDateCleared() {
		_spec.ClearField(member.FieldStartDate, field.TypeTime)
	}
	if value, ok := mu.mutation.EndDate(); ok {
		_spec.SetField(member.FieldEndDate, field.TypeTime, value)
	}
	if mu.mutation.EndDateCleared() {
		_spec.ClearField(member.FieldEndDate, field.TypeTime)
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.SetField(member.FieldStatus, field.TypeEnum, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MemberUpdateOne is the builder for updating a single Member entity.
type MemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberMutation
}

// SetEmail sets the "email" field.
func (muo *MemberUpdateOne) SetEmail(s string) *MemberUpdateOne {
	muo.mutation.SetEmail(s)
	return muo
}

// SetName sets the "name" field.
func (muo *MemberUpdateOne) SetName(s string) *MemberUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetLevel sets the "level" field.
func (muo *MemberUpdateOne) SetLevel(i int) *MemberUpdateOne {
	muo.mutation.ResetLevel()
	muo.mutation.SetLevel(i)
	return muo
}

// AddLevel adds i to the "level" field.
func (muo *MemberUpdateOne) AddLevel(i int) *MemberUpdateOne {
	muo.mutation.AddLevel(i)
	return muo
}

// SetPositions sets the "positions" field.
func (muo *MemberUpdateOne) SetPositions(s string) *MemberUpdateOne {
	muo.mutation.SetPositions(s)
	return muo
}

// SetKpi sets the "kpi" field.
func (muo *MemberUpdateOne) SetKpi(i int) *MemberUpdateOne {
	muo.mutation.ResetKpi()
	muo.mutation.SetKpi(i)
	return muo
}

// AddKpi adds i to the "kpi" field.
func (muo *MemberUpdateOne) AddKpi(i int) *MemberUpdateOne {
	muo.mutation.AddKpi(i)
	return muo
}

// SetCategory sets the "category" field.
func (muo *MemberUpdateOne) SetCategory(m member.Category) *MemberUpdateOne {
	muo.mutation.SetCategory(m)
	return muo
}

// SetTotalEffort sets the "total_effort" field.
func (muo *MemberUpdateOne) SetTotalEffort(f float32) *MemberUpdateOne {
	muo.mutation.ResetTotalEffort()
	muo.mutation.SetTotalEffort(f)
	return muo
}

// AddTotalEffort adds f to the "total_effort" field.
func (muo *MemberUpdateOne) AddTotalEffort(f float32) *MemberUpdateOne {
	muo.mutation.AddTotalEffort(f)
	return muo
}

// SetStartDate sets the "start_date" field.
func (muo *MemberUpdateOne) SetStartDate(t time.Time) *MemberUpdateOne {
	muo.mutation.SetStartDate(t)
	return muo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableStartDate(t *time.Time) *MemberUpdateOne {
	if t != nil {
		muo.SetStartDate(*t)
	}
	return muo
}

// ClearStartDate clears the value of the "start_date" field.
func (muo *MemberUpdateOne) ClearStartDate() *MemberUpdateOne {
	muo.mutation.ClearStartDate()
	return muo
}

// SetEndDate sets the "end_date" field.
func (muo *MemberUpdateOne) SetEndDate(t time.Time) *MemberUpdateOne {
	muo.mutation.SetEndDate(t)
	return muo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableEndDate(t *time.Time) *MemberUpdateOne {
	if t != nil {
		muo.SetEndDate(*t)
	}
	return muo
}

// ClearEndDate clears the value of the "end_date" field.
func (muo *MemberUpdateOne) ClearEndDate() *MemberUpdateOne {
	muo.mutation.ClearEndDate()
	return muo
}

// SetStatus sets the "status" field.
func (muo *MemberUpdateOne) SetStatus(m member.Status) *MemberUpdateOne {
	muo.mutation.SetStatus(m)
	return muo
}

// Mutation returns the MemberMutation object of the builder.
func (muo *MemberUpdateOne) Mutation() *MemberMutation {
	return muo.mutation
}

// Where appends a list predicates to the MemberUpdate builder.
func (muo *MemberUpdateOne) Where(ps ...predicate.Member) *MemberUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MemberUpdateOne) Select(field string, fields ...string) *MemberUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Member entity.
func (muo *MemberUpdateOne) Save(ctx context.Context) (*Member, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MemberUpdateOne) SaveX(ctx context.Context) *Member {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MemberUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MemberUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MemberUpdateOne) check() error {
	if v, ok := muo.mutation.Email(); ok {
		if err := member.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Member.email": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Level(); ok {
		if err := member.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "Member.level": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Kpi(); ok {
		if err := member.KpiValidator(v); err != nil {
			return &ValidationError{Name: "kpi", err: fmt.Errorf(`ent: validator failed for field "Member.kpi": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Category(); ok {
		if err := member.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Member.category": %w`, err)}
		}
	}
	if v, ok := muo.mutation.TotalEffort(); ok {
		if err := member.TotalEffortValidator(v); err != nil {
			return &ValidationError{Name: "total_effort", err: fmt.Errorf(`ent: validator failed for field "Member.total_effort": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Status(); ok {
		if err := member.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Member.status": %w`, err)}
		}
	}
	return nil
}

func (muo *MemberUpdateOne) sqlSave(ctx context.Context) (_node *Member, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(member.Table, member.Columns, sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Member.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, member.FieldID)
		for _, f := range fields {
			if !member.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != member.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Email(); ok {
		_spec.SetField(member.FieldEmail, field.TypeString, value)
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(member.FieldName, field.TypeString, value)
	}
	if value, ok := muo.mutation.Level(); ok {
		_spec.SetField(member.FieldLevel, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedLevel(); ok {
		_spec.AddField(member.FieldLevel, field.TypeInt, value)
	}
	if value, ok := muo.mutation.Positions(); ok {
		_spec.SetField(member.FieldPositions, field.TypeString, value)
	}
	if value, ok := muo.mutation.Kpi(); ok {
		_spec.SetField(member.FieldKpi, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedKpi(); ok {
		_spec.AddField(member.FieldKpi, field.TypeInt, value)
	}
	if value, ok := muo.mutation.Category(); ok {
		_spec.SetField(member.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := muo.mutation.TotalEffort(); ok {
		_spec.SetField(member.FieldTotalEffort, field.TypeFloat32, value)
	}
	if value, ok := muo.mutation.AddedTotalEffort(); ok {
		_spec.AddField(member.FieldTotalEffort, field.TypeFloat32, value)
	}
	if value, ok := muo.mutation.StartDate(); ok {
		_spec.SetField(member.FieldStartDate, field.TypeTime, value)
	}
	if muo.mutation.StartDateCleared() {
		_spec.ClearField(member.FieldStartDate, field.TypeTime)
	}
	if value, ok := muo.mutation.EndDate(); ok {
		_spec.SetField(member.FieldEndDate, field.TypeTime, value)
	}
	if muo.mutation.EndDateCleared() {
		_spec.ClearField(member.FieldEndDate, field.TypeTime)
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.SetField(member.FieldStatus, field.TypeEnum, value)
	}
	_node = &Member{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
