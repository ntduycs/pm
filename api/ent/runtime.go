// Code generated by ent, DO NOT EDIT.

package ent

import (
	"project-management/ent/member"
	"project-management/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	memberFields := schema.Member{}.Fields()
	_ = memberFields
	// memberDescKpi is the schema descriptor for kpi field.
	memberDescKpi := memberFields[4].Descriptor()
	// member.KpiValidator is a validator for the "kpi" field. It is called by the builders before save.
	member.KpiValidator = func() func(float32) error {
		validators := memberDescKpi.Validators
		fns := [...]func(float32) error{
			validators[0].(func(float32) error),
			validators[1].(func(float32) error),
		}
		return func(kpi float32) error {
			for _, fn := range fns {
				if err := fn(kpi); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// memberDescTotalEffort is the schema descriptor for total_effort field.
	memberDescTotalEffort := memberFields[6].Descriptor()
	// member.TotalEffortValidator is a validator for the "total_effort" field. It is called by the builders before save.
	member.TotalEffortValidator = func() func(float32) error {
		validators := memberDescTotalEffort.Validators
		fns := [...]func(float32) error{
			validators[0].(func(float32) error),
			validators[1].(func(float32) error),
		}
		return func(total_effort float32) error {
			for _, fn := range fns {
				if err := fn(total_effort); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
