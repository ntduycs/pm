// Code generated by ent, DO NOT EDIT.

package papctechnicalscore

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the papctechnicalscore type in the database.
	Label = "pa_pc_technical_score"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPaPcID holds the string denoting the pa_pc_id field in the database.
	FieldPaPcID = "pa_pc_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldSkill holds the string denoting the skill field in the database.
	FieldSkill = "skill"
	// FieldSelfScore holds the string denoting the self_score field in the database.
	FieldSelfScore = "self_score"
	// FieldPeerScore holds the string denoting the peer_score field in the database.
	FieldPeerScore = "peer_score"
	// FieldManagerScore holds the string denoting the manager_score field in the database.
	FieldManagerScore = "manager_score"
	// EdgePaPc holds the string denoting the pa_pc edge name in mutations.
	EdgePaPc = "pa_pc"
	// Table holds the table name of the papctechnicalscore in the database.
	Table = "pa_pc_technical_score"
	// PaPcTable is the table that holds the pa_pc relation/edge.
	PaPcTable = "pa_pc_technical_score"
	// PaPcInverseTable is the table name for the PaPc entity.
	// It exists in this package in order to avoid circular dependency with the "papc" package.
	PaPcInverseTable = "pa_pc"
	// PaPcColumn is the table column denoting the pa_pc relation/edge.
	PaPcColumn = "pa_pc_id"
)

// Columns holds all SQL columns for papctechnicalscore fields.
var Columns = []string{
	FieldID,
	FieldPaPcID,
	FieldType,
	FieldSkill,
	FieldSelfScore,
	FieldPeerScore,
	FieldManagerScore,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeSoftSkills Type = "soft-skills"
	TypeHardSkills Type = "hard-skills"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeSoftSkills, TypeHardSkills:
		return nil
	default:
		return fmt.Errorf("papctechnicalscore: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the PaPcTechnicalScore queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPaPcID orders the results by the pa_pc_id field.
func ByPaPcID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaPcID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// BySkill orders the results by the skill field.
func BySkill(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSkill, opts...).ToFunc()
}

// BySelfScore orders the results by the self_score field.
func BySelfScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSelfScore, opts...).ToFunc()
}

// ByPeerScore orders the results by the peer_score field.
func ByPeerScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPeerScore, opts...).ToFunc()
}

// ByManagerScore orders the results by the manager_score field.
func ByManagerScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldManagerScore, opts...).ToFunc()
}

// ByPaPcField orders the results by pa_pc field.
func ByPaPcField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPaPcStep(), sql.OrderByField(field, opts...))
	}
}
func newPaPcStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PaPcInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PaPcTable, PaPcColumn),
	)
}
