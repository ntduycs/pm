// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"project-management/ent/papctechnicalscore"
	"project-management/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaPcTechnicalScoreDelete is the builder for deleting a PaPcTechnicalScore entity.
type PaPcTechnicalScoreDelete struct {
	config
	hooks    []Hook
	mutation *PaPcTechnicalScoreMutation
}

// Where appends a list predicates to the PaPcTechnicalScoreDelete builder.
func (pptsd *PaPcTechnicalScoreDelete) Where(ps ...predicate.PaPcTechnicalScore) *PaPcTechnicalScoreDelete {
	pptsd.mutation.Where(ps...)
	return pptsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pptsd *PaPcTechnicalScoreDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pptsd.sqlExec, pptsd.mutation, pptsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pptsd *PaPcTechnicalScoreDelete) ExecX(ctx context.Context) int {
	n, err := pptsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pptsd *PaPcTechnicalScoreDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(papctechnicalscore.Table, sqlgraph.NewFieldSpec(papctechnicalscore.FieldID, field.TypeInt))
	if ps := pptsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pptsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pptsd.mutation.done = true
	return affected, err
}

// PaPcTechnicalScoreDeleteOne is the builder for deleting a single PaPcTechnicalScore entity.
type PaPcTechnicalScoreDeleteOne struct {
	pptsd *PaPcTechnicalScoreDelete
}

// Where appends a list predicates to the PaPcTechnicalScoreDelete builder.
func (pptsdo *PaPcTechnicalScoreDeleteOne) Where(ps ...predicate.PaPcTechnicalScore) *PaPcTechnicalScoreDeleteOne {
	pptsdo.pptsd.mutation.Where(ps...)
	return pptsdo
}

// Exec executes the deletion query.
func (pptsdo *PaPcTechnicalScoreDeleteOne) Exec(ctx context.Context) error {
	n, err := pptsdo.pptsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{papctechnicalscore.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pptsdo *PaPcTechnicalScoreDeleteOne) ExecX(ctx context.Context) {
	if err := pptsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
