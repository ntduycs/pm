// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management/ent/papc"
	"project-management/ent/papctechnicalscore"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaPcTechnicalScoreCreate is the builder for creating a PaPcTechnicalScore entity.
type PaPcTechnicalScoreCreate struct {
	config
	mutation *PaPcTechnicalScoreMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPaPcID sets the "pa_pc_id" field.
func (pptsc *PaPcTechnicalScoreCreate) SetPaPcID(i int) *PaPcTechnicalScoreCreate {
	pptsc.mutation.SetPaPcID(i)
	return pptsc
}

// SetType sets the "type" field.
func (pptsc *PaPcTechnicalScoreCreate) SetType(pa papctechnicalscore.Type) *PaPcTechnicalScoreCreate {
	pptsc.mutation.SetType(pa)
	return pptsc
}

// SetSkill sets the "skill" field.
func (pptsc *PaPcTechnicalScoreCreate) SetSkill(s string) *PaPcTechnicalScoreCreate {
	pptsc.mutation.SetSkill(s)
	return pptsc
}

// SetSelfScore sets the "self_score" field.
func (pptsc *PaPcTechnicalScoreCreate) SetSelfScore(f float32) *PaPcTechnicalScoreCreate {
	pptsc.mutation.SetSelfScore(f)
	return pptsc
}

// SetPeerScore sets the "peer_score" field.
func (pptsc *PaPcTechnicalScoreCreate) SetPeerScore(f float32) *PaPcTechnicalScoreCreate {
	pptsc.mutation.SetPeerScore(f)
	return pptsc
}

// SetNillablePeerScore sets the "peer_score" field if the given value is not nil.
func (pptsc *PaPcTechnicalScoreCreate) SetNillablePeerScore(f *float32) *PaPcTechnicalScoreCreate {
	if f != nil {
		pptsc.SetPeerScore(*f)
	}
	return pptsc
}

// SetManagerScore sets the "manager_score" field.
func (pptsc *PaPcTechnicalScoreCreate) SetManagerScore(f float32) *PaPcTechnicalScoreCreate {
	pptsc.mutation.SetManagerScore(f)
	return pptsc
}

// SetID sets the "id" field.
func (pptsc *PaPcTechnicalScoreCreate) SetID(i int) *PaPcTechnicalScoreCreate {
	pptsc.mutation.SetID(i)
	return pptsc
}

// SetPaPc sets the "pa_pc" edge to the PaPc entity.
func (pptsc *PaPcTechnicalScoreCreate) SetPaPc(p *PaPc) *PaPcTechnicalScoreCreate {
	return pptsc.SetPaPcID(p.ID)
}

// Mutation returns the PaPcTechnicalScoreMutation object of the builder.
func (pptsc *PaPcTechnicalScoreCreate) Mutation() *PaPcTechnicalScoreMutation {
	return pptsc.mutation
}

// Save creates the PaPcTechnicalScore in the database.
func (pptsc *PaPcTechnicalScoreCreate) Save(ctx context.Context) (*PaPcTechnicalScore, error) {
	return withHooks(ctx, pptsc.sqlSave, pptsc.mutation, pptsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pptsc *PaPcTechnicalScoreCreate) SaveX(ctx context.Context) *PaPcTechnicalScore {
	v, err := pptsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pptsc *PaPcTechnicalScoreCreate) Exec(ctx context.Context) error {
	_, err := pptsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pptsc *PaPcTechnicalScoreCreate) ExecX(ctx context.Context) {
	if err := pptsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pptsc *PaPcTechnicalScoreCreate) check() error {
	if _, ok := pptsc.mutation.PaPcID(); !ok {
		return &ValidationError{Name: "pa_pc_id", err: errors.New(`ent: missing required field "PaPcTechnicalScore.pa_pc_id"`)}
	}
	if _, ok := pptsc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "PaPcTechnicalScore.type"`)}
	}
	if v, ok := pptsc.mutation.GetType(); ok {
		if err := papctechnicalscore.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PaPcTechnicalScore.type": %w`, err)}
		}
	}
	if _, ok := pptsc.mutation.Skill(); !ok {
		return &ValidationError{Name: "skill", err: errors.New(`ent: missing required field "PaPcTechnicalScore.skill"`)}
	}
	if _, ok := pptsc.mutation.SelfScore(); !ok {
		return &ValidationError{Name: "self_score", err: errors.New(`ent: missing required field "PaPcTechnicalScore.self_score"`)}
	}
	if _, ok := pptsc.mutation.ManagerScore(); !ok {
		return &ValidationError{Name: "manager_score", err: errors.New(`ent: missing required field "PaPcTechnicalScore.manager_score"`)}
	}
	if _, ok := pptsc.mutation.PaPcID(); !ok {
		return &ValidationError{Name: "pa_pc", err: errors.New(`ent: missing required edge "PaPcTechnicalScore.pa_pc"`)}
	}
	return nil
}

func (pptsc *PaPcTechnicalScoreCreate) sqlSave(ctx context.Context) (*PaPcTechnicalScore, error) {
	if err := pptsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pptsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pptsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	pptsc.mutation.id = &_node.ID
	pptsc.mutation.done = true
	return _node, nil
}

func (pptsc *PaPcTechnicalScoreCreate) createSpec() (*PaPcTechnicalScore, *sqlgraph.CreateSpec) {
	var (
		_node = &PaPcTechnicalScore{config: pptsc.config}
		_spec = sqlgraph.NewCreateSpec(papctechnicalscore.Table, sqlgraph.NewFieldSpec(papctechnicalscore.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pptsc.conflict
	if id, ok := pptsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pptsc.mutation.GetType(); ok {
		_spec.SetField(papctechnicalscore.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := pptsc.mutation.Skill(); ok {
		_spec.SetField(papctechnicalscore.FieldSkill, field.TypeString, value)
		_node.Skill = value
	}
	if value, ok := pptsc.mutation.SelfScore(); ok {
		_spec.SetField(papctechnicalscore.FieldSelfScore, field.TypeFloat32, value)
		_node.SelfScore = value
	}
	if value, ok := pptsc.mutation.PeerScore(); ok {
		_spec.SetField(papctechnicalscore.FieldPeerScore, field.TypeFloat32, value)
		_node.PeerScore = &value
	}
	if value, ok := pptsc.mutation.ManagerScore(); ok {
		_spec.SetField(papctechnicalscore.FieldManagerScore, field.TypeFloat32, value)
		_node.ManagerScore = value
	}
	if nodes := pptsc.mutation.PaPcIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   papctechnicalscore.PaPcTable,
			Columns: []string{papctechnicalscore.PaPcColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(papc.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PaPcID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PaPcTechnicalScore.Create().
//		SetPaPcID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaPcTechnicalScoreUpsert) {
//			SetPaPcID(v+v).
//		}).
//		Exec(ctx)
func (pptsc *PaPcTechnicalScoreCreate) OnConflict(opts ...sql.ConflictOption) *PaPcTechnicalScoreUpsertOne {
	pptsc.conflict = opts
	return &PaPcTechnicalScoreUpsertOne{
		create: pptsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PaPcTechnicalScore.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pptsc *PaPcTechnicalScoreCreate) OnConflictColumns(columns ...string) *PaPcTechnicalScoreUpsertOne {
	pptsc.conflict = append(pptsc.conflict, sql.ConflictColumns(columns...))
	return &PaPcTechnicalScoreUpsertOne{
		create: pptsc,
	}
}

type (
	// PaPcTechnicalScoreUpsertOne is the builder for "upsert"-ing
	//  one PaPcTechnicalScore node.
	PaPcTechnicalScoreUpsertOne struct {
		create *PaPcTechnicalScoreCreate
	}

	// PaPcTechnicalScoreUpsert is the "OnConflict" setter.
	PaPcTechnicalScoreUpsert struct {
		*sql.UpdateSet
	}
)

// SetPaPcID sets the "pa_pc_id" field.
func (u *PaPcTechnicalScoreUpsert) SetPaPcID(v int) *PaPcTechnicalScoreUpsert {
	u.Set(papctechnicalscore.FieldPaPcID, v)
	return u
}

// UpdatePaPcID sets the "pa_pc_id" field to the value that was provided on create.
func (u *PaPcTechnicalScoreUpsert) UpdatePaPcID() *PaPcTechnicalScoreUpsert {
	u.SetExcluded(papctechnicalscore.FieldPaPcID)
	return u
}

// SetType sets the "type" field.
func (u *PaPcTechnicalScoreUpsert) SetType(v papctechnicalscore.Type) *PaPcTechnicalScoreUpsert {
	u.Set(papctechnicalscore.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PaPcTechnicalScoreUpsert) UpdateType() *PaPcTechnicalScoreUpsert {
	u.SetExcluded(papctechnicalscore.FieldType)
	return u
}

// SetSkill sets the "skill" field.
func (u *PaPcTechnicalScoreUpsert) SetSkill(v string) *PaPcTechnicalScoreUpsert {
	u.Set(papctechnicalscore.FieldSkill, v)
	return u
}

// UpdateSkill sets the "skill" field to the value that was provided on create.
func (u *PaPcTechnicalScoreUpsert) UpdateSkill() *PaPcTechnicalScoreUpsert {
	u.SetExcluded(papctechnicalscore.FieldSkill)
	return u
}

// SetSelfScore sets the "self_score" field.
func (u *PaPcTechnicalScoreUpsert) SetSelfScore(v float32) *PaPcTechnicalScoreUpsert {
	u.Set(papctechnicalscore.FieldSelfScore, v)
	return u
}

// UpdateSelfScore sets the "self_score" field to the value that was provided on create.
func (u *PaPcTechnicalScoreUpsert) UpdateSelfScore() *PaPcTechnicalScoreUpsert {
	u.SetExcluded(papctechnicalscore.FieldSelfScore)
	return u
}

// AddSelfScore adds v to the "self_score" field.
func (u *PaPcTechnicalScoreUpsert) AddSelfScore(v float32) *PaPcTechnicalScoreUpsert {
	u.Add(papctechnicalscore.FieldSelfScore, v)
	return u
}

// SetPeerScore sets the "peer_score" field.
func (u *PaPcTechnicalScoreUpsert) SetPeerScore(v float32) *PaPcTechnicalScoreUpsert {
	u.Set(papctechnicalscore.FieldPeerScore, v)
	return u
}

// UpdatePeerScore sets the "peer_score" field to the value that was provided on create.
func (u *PaPcTechnicalScoreUpsert) UpdatePeerScore() *PaPcTechnicalScoreUpsert {
	u.SetExcluded(papctechnicalscore.FieldPeerScore)
	return u
}

// AddPeerScore adds v to the "peer_score" field.
func (u *PaPcTechnicalScoreUpsert) AddPeerScore(v float32) *PaPcTechnicalScoreUpsert {
	u.Add(papctechnicalscore.FieldPeerScore, v)
	return u
}

// ClearPeerScore clears the value of the "peer_score" field.
func (u *PaPcTechnicalScoreUpsert) ClearPeerScore() *PaPcTechnicalScoreUpsert {
	u.SetNull(papctechnicalscore.FieldPeerScore)
	return u
}

// SetManagerScore sets the "manager_score" field.
func (u *PaPcTechnicalScoreUpsert) SetManagerScore(v float32) *PaPcTechnicalScoreUpsert {
	u.Set(papctechnicalscore.FieldManagerScore, v)
	return u
}

// UpdateManagerScore sets the "manager_score" field to the value that was provided on create.
func (u *PaPcTechnicalScoreUpsert) UpdateManagerScore() *PaPcTechnicalScoreUpsert {
	u.SetExcluded(papctechnicalscore.FieldManagerScore)
	return u
}

// AddManagerScore adds v to the "manager_score" field.
func (u *PaPcTechnicalScoreUpsert) AddManagerScore(v float32) *PaPcTechnicalScoreUpsert {
	u.Add(papctechnicalscore.FieldManagerScore, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PaPcTechnicalScore.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(papctechnicalscore.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PaPcTechnicalScoreUpsertOne) UpdateNewValues() *PaPcTechnicalScoreUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(papctechnicalscore.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PaPcTechnicalScore.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PaPcTechnicalScoreUpsertOne) Ignore() *PaPcTechnicalScoreUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaPcTechnicalScoreUpsertOne) DoNothing() *PaPcTechnicalScoreUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaPcTechnicalScoreCreate.OnConflict
// documentation for more info.
func (u *PaPcTechnicalScoreUpsertOne) Update(set func(*PaPcTechnicalScoreUpsert)) *PaPcTechnicalScoreUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaPcTechnicalScoreUpsert{UpdateSet: update})
	}))
	return u
}

// SetPaPcID sets the "pa_pc_id" field.
func (u *PaPcTechnicalScoreUpsertOne) SetPaPcID(v int) *PaPcTechnicalScoreUpsertOne {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.SetPaPcID(v)
	})
}

// UpdatePaPcID sets the "pa_pc_id" field to the value that was provided on create.
func (u *PaPcTechnicalScoreUpsertOne) UpdatePaPcID() *PaPcTechnicalScoreUpsertOne {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.UpdatePaPcID()
	})
}

// SetType sets the "type" field.
func (u *PaPcTechnicalScoreUpsertOne) SetType(v papctechnicalscore.Type) *PaPcTechnicalScoreUpsertOne {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PaPcTechnicalScoreUpsertOne) UpdateType() *PaPcTechnicalScoreUpsertOne {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.UpdateType()
	})
}

// SetSkill sets the "skill" field.
func (u *PaPcTechnicalScoreUpsertOne) SetSkill(v string) *PaPcTechnicalScoreUpsertOne {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.SetSkill(v)
	})
}

// UpdateSkill sets the "skill" field to the value that was provided on create.
func (u *PaPcTechnicalScoreUpsertOne) UpdateSkill() *PaPcTechnicalScoreUpsertOne {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.UpdateSkill()
	})
}

// SetSelfScore sets the "self_score" field.
func (u *PaPcTechnicalScoreUpsertOne) SetSelfScore(v float32) *PaPcTechnicalScoreUpsertOne {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.SetSelfScore(v)
	})
}

// AddSelfScore adds v to the "self_score" field.
func (u *PaPcTechnicalScoreUpsertOne) AddSelfScore(v float32) *PaPcTechnicalScoreUpsertOne {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.AddSelfScore(v)
	})
}

// UpdateSelfScore sets the "self_score" field to the value that was provided on create.
func (u *PaPcTechnicalScoreUpsertOne) UpdateSelfScore() *PaPcTechnicalScoreUpsertOne {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.UpdateSelfScore()
	})
}

// SetPeerScore sets the "peer_score" field.
func (u *PaPcTechnicalScoreUpsertOne) SetPeerScore(v float32) *PaPcTechnicalScoreUpsertOne {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.SetPeerScore(v)
	})
}

// AddPeerScore adds v to the "peer_score" field.
func (u *PaPcTechnicalScoreUpsertOne) AddPeerScore(v float32) *PaPcTechnicalScoreUpsertOne {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.AddPeerScore(v)
	})
}

// UpdatePeerScore sets the "peer_score" field to the value that was provided on create.
func (u *PaPcTechnicalScoreUpsertOne) UpdatePeerScore() *PaPcTechnicalScoreUpsertOne {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.UpdatePeerScore()
	})
}

// ClearPeerScore clears the value of the "peer_score" field.
func (u *PaPcTechnicalScoreUpsertOne) ClearPeerScore() *PaPcTechnicalScoreUpsertOne {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.ClearPeerScore()
	})
}

// SetManagerScore sets the "manager_score" field.
func (u *PaPcTechnicalScoreUpsertOne) SetManagerScore(v float32) *PaPcTechnicalScoreUpsertOne {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.SetManagerScore(v)
	})
}

// AddManagerScore adds v to the "manager_score" field.
func (u *PaPcTechnicalScoreUpsertOne) AddManagerScore(v float32) *PaPcTechnicalScoreUpsertOne {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.AddManagerScore(v)
	})
}

// UpdateManagerScore sets the "manager_score" field to the value that was provided on create.
func (u *PaPcTechnicalScoreUpsertOne) UpdateManagerScore() *PaPcTechnicalScoreUpsertOne {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.UpdateManagerScore()
	})
}

// Exec executes the query.
func (u *PaPcTechnicalScoreUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PaPcTechnicalScoreCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaPcTechnicalScoreUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PaPcTechnicalScoreUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PaPcTechnicalScoreUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PaPcTechnicalScoreCreateBulk is the builder for creating many PaPcTechnicalScore entities in bulk.
type PaPcTechnicalScoreCreateBulk struct {
	config
	err      error
	builders []*PaPcTechnicalScoreCreate
	conflict []sql.ConflictOption
}

// Save creates the PaPcTechnicalScore entities in the database.
func (pptscb *PaPcTechnicalScoreCreateBulk) Save(ctx context.Context) ([]*PaPcTechnicalScore, error) {
	if pptscb.err != nil {
		return nil, pptscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pptscb.builders))
	nodes := make([]*PaPcTechnicalScore, len(pptscb.builders))
	mutators := make([]Mutator, len(pptscb.builders))
	for i := range pptscb.builders {
		func(i int, root context.Context) {
			builder := pptscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaPcTechnicalScoreMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pptscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pptscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pptscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pptscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pptscb *PaPcTechnicalScoreCreateBulk) SaveX(ctx context.Context) []*PaPcTechnicalScore {
	v, err := pptscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pptscb *PaPcTechnicalScoreCreateBulk) Exec(ctx context.Context) error {
	_, err := pptscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pptscb *PaPcTechnicalScoreCreateBulk) ExecX(ctx context.Context) {
	if err := pptscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PaPcTechnicalScore.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaPcTechnicalScoreUpsert) {
//			SetPaPcID(v+v).
//		}).
//		Exec(ctx)
func (pptscb *PaPcTechnicalScoreCreateBulk) OnConflict(opts ...sql.ConflictOption) *PaPcTechnicalScoreUpsertBulk {
	pptscb.conflict = opts
	return &PaPcTechnicalScoreUpsertBulk{
		create: pptscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PaPcTechnicalScore.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pptscb *PaPcTechnicalScoreCreateBulk) OnConflictColumns(columns ...string) *PaPcTechnicalScoreUpsertBulk {
	pptscb.conflict = append(pptscb.conflict, sql.ConflictColumns(columns...))
	return &PaPcTechnicalScoreUpsertBulk{
		create: pptscb,
	}
}

// PaPcTechnicalScoreUpsertBulk is the builder for "upsert"-ing
// a bulk of PaPcTechnicalScore nodes.
type PaPcTechnicalScoreUpsertBulk struct {
	create *PaPcTechnicalScoreCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PaPcTechnicalScore.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(papctechnicalscore.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PaPcTechnicalScoreUpsertBulk) UpdateNewValues() *PaPcTechnicalScoreUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(papctechnicalscore.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PaPcTechnicalScore.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PaPcTechnicalScoreUpsertBulk) Ignore() *PaPcTechnicalScoreUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaPcTechnicalScoreUpsertBulk) DoNothing() *PaPcTechnicalScoreUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaPcTechnicalScoreCreateBulk.OnConflict
// documentation for more info.
func (u *PaPcTechnicalScoreUpsertBulk) Update(set func(*PaPcTechnicalScoreUpsert)) *PaPcTechnicalScoreUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaPcTechnicalScoreUpsert{UpdateSet: update})
	}))
	return u
}

// SetPaPcID sets the "pa_pc_id" field.
func (u *PaPcTechnicalScoreUpsertBulk) SetPaPcID(v int) *PaPcTechnicalScoreUpsertBulk {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.SetPaPcID(v)
	})
}

// UpdatePaPcID sets the "pa_pc_id" field to the value that was provided on create.
func (u *PaPcTechnicalScoreUpsertBulk) UpdatePaPcID() *PaPcTechnicalScoreUpsertBulk {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.UpdatePaPcID()
	})
}

// SetType sets the "type" field.
func (u *PaPcTechnicalScoreUpsertBulk) SetType(v papctechnicalscore.Type) *PaPcTechnicalScoreUpsertBulk {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *PaPcTechnicalScoreUpsertBulk) UpdateType() *PaPcTechnicalScoreUpsertBulk {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.UpdateType()
	})
}

// SetSkill sets the "skill" field.
func (u *PaPcTechnicalScoreUpsertBulk) SetSkill(v string) *PaPcTechnicalScoreUpsertBulk {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.SetSkill(v)
	})
}

// UpdateSkill sets the "skill" field to the value that was provided on create.
func (u *PaPcTechnicalScoreUpsertBulk) UpdateSkill() *PaPcTechnicalScoreUpsertBulk {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.UpdateSkill()
	})
}

// SetSelfScore sets the "self_score" field.
func (u *PaPcTechnicalScoreUpsertBulk) SetSelfScore(v float32) *PaPcTechnicalScoreUpsertBulk {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.SetSelfScore(v)
	})
}

// AddSelfScore adds v to the "self_score" field.
func (u *PaPcTechnicalScoreUpsertBulk) AddSelfScore(v float32) *PaPcTechnicalScoreUpsertBulk {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.AddSelfScore(v)
	})
}

// UpdateSelfScore sets the "self_score" field to the value that was provided on create.
func (u *PaPcTechnicalScoreUpsertBulk) UpdateSelfScore() *PaPcTechnicalScoreUpsertBulk {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.UpdateSelfScore()
	})
}

// SetPeerScore sets the "peer_score" field.
func (u *PaPcTechnicalScoreUpsertBulk) SetPeerScore(v float32) *PaPcTechnicalScoreUpsertBulk {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.SetPeerScore(v)
	})
}

// AddPeerScore adds v to the "peer_score" field.
func (u *PaPcTechnicalScoreUpsertBulk) AddPeerScore(v float32) *PaPcTechnicalScoreUpsertBulk {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.AddPeerScore(v)
	})
}

// UpdatePeerScore sets the "peer_score" field to the value that was provided on create.
func (u *PaPcTechnicalScoreUpsertBulk) UpdatePeerScore() *PaPcTechnicalScoreUpsertBulk {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.UpdatePeerScore()
	})
}

// ClearPeerScore clears the value of the "peer_score" field.
func (u *PaPcTechnicalScoreUpsertBulk) ClearPeerScore() *PaPcTechnicalScoreUpsertBulk {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.ClearPeerScore()
	})
}

// SetManagerScore sets the "manager_score" field.
func (u *PaPcTechnicalScoreUpsertBulk) SetManagerScore(v float32) *PaPcTechnicalScoreUpsertBulk {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.SetManagerScore(v)
	})
}

// AddManagerScore adds v to the "manager_score" field.
func (u *PaPcTechnicalScoreUpsertBulk) AddManagerScore(v float32) *PaPcTechnicalScoreUpsertBulk {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.AddManagerScore(v)
	})
}

// UpdateManagerScore sets the "manager_score" field to the value that was provided on create.
func (u *PaPcTechnicalScoreUpsertBulk) UpdateManagerScore() *PaPcTechnicalScoreUpsertBulk {
	return u.Update(func(s *PaPcTechnicalScoreUpsert) {
		s.UpdateManagerScore()
	})
}

// Exec executes the query.
func (u *PaPcTechnicalScoreUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PaPcTechnicalScoreCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PaPcTechnicalScoreCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaPcTechnicalScoreUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
