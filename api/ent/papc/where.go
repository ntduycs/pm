// Code generated by ent, DO NOT EDIT.

package papc

import (
	"project-management/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PaPc {
	return predicate.PaPc(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PaPc {
	return predicate.PaPc(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PaPc {
	return predicate.PaPc(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PaPc {
	return predicate.PaPc(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PaPc {
	return predicate.PaPc(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PaPc {
	return predicate.PaPc(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PaPc {
	return predicate.PaPc(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PaPc {
	return predicate.PaPc(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PaPc {
	return predicate.PaPc(sql.FieldLTE(FieldID, id))
}

// MemberID applies equality check predicate on the "member_id" field. It's identical to MemberIDEQ.
func MemberID(v int) predicate.PaPc {
	return predicate.PaPc(sql.FieldEQ(FieldMemberID, v))
}

// TechnicalScore applies equality check predicate on the "technical_score" field. It's identical to TechnicalScoreEQ.
func TechnicalScore(v float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldEQ(FieldTechnicalScore, v))
}

// ProductivityScore applies equality check predicate on the "productivity_score" field. It's identical to ProductivityScoreEQ.
func ProductivityScore(v float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldEQ(FieldProductivityScore, v))
}

// CollaborationScore applies equality check predicate on the "collaboration_score" field. It's identical to CollaborationScoreEQ.
func CollaborationScore(v float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldEQ(FieldCollaborationScore, v))
}

// DevelopmentScore applies equality check predicate on the "development_score" field. It's identical to DevelopmentScoreEQ.
func DevelopmentScore(v float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldEQ(FieldDevelopmentScore, v))
}

// Period applies equality check predicate on the "period" field. It's identical to PeriodEQ.
func Period(v string) predicate.PaPc {
	return predicate.PaPc(sql.FieldEQ(FieldPeriod, v))
}

// MemberIDEQ applies the EQ predicate on the "member_id" field.
func MemberIDEQ(v int) predicate.PaPc {
	return predicate.PaPc(sql.FieldEQ(FieldMemberID, v))
}

// MemberIDNEQ applies the NEQ predicate on the "member_id" field.
func MemberIDNEQ(v int) predicate.PaPc {
	return predicate.PaPc(sql.FieldNEQ(FieldMemberID, v))
}

// MemberIDIn applies the In predicate on the "member_id" field.
func MemberIDIn(vs ...int) predicate.PaPc {
	return predicate.PaPc(sql.FieldIn(FieldMemberID, vs...))
}

// MemberIDNotIn applies the NotIn predicate on the "member_id" field.
func MemberIDNotIn(vs ...int) predicate.PaPc {
	return predicate.PaPc(sql.FieldNotIn(FieldMemberID, vs...))
}

// TechnicalScoreEQ applies the EQ predicate on the "technical_score" field.
func TechnicalScoreEQ(v float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldEQ(FieldTechnicalScore, v))
}

// TechnicalScoreNEQ applies the NEQ predicate on the "technical_score" field.
func TechnicalScoreNEQ(v float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldNEQ(FieldTechnicalScore, v))
}

// TechnicalScoreIn applies the In predicate on the "technical_score" field.
func TechnicalScoreIn(vs ...float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldIn(FieldTechnicalScore, vs...))
}

// TechnicalScoreNotIn applies the NotIn predicate on the "technical_score" field.
func TechnicalScoreNotIn(vs ...float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldNotIn(FieldTechnicalScore, vs...))
}

// TechnicalScoreGT applies the GT predicate on the "technical_score" field.
func TechnicalScoreGT(v float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldGT(FieldTechnicalScore, v))
}

// TechnicalScoreGTE applies the GTE predicate on the "technical_score" field.
func TechnicalScoreGTE(v float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldGTE(FieldTechnicalScore, v))
}

// TechnicalScoreLT applies the LT predicate on the "technical_score" field.
func TechnicalScoreLT(v float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldLT(FieldTechnicalScore, v))
}

// TechnicalScoreLTE applies the LTE predicate on the "technical_score" field.
func TechnicalScoreLTE(v float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldLTE(FieldTechnicalScore, v))
}

// ProductivityScoreEQ applies the EQ predicate on the "productivity_score" field.
func ProductivityScoreEQ(v float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldEQ(FieldProductivityScore, v))
}

// ProductivityScoreNEQ applies the NEQ predicate on the "productivity_score" field.
func ProductivityScoreNEQ(v float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldNEQ(FieldProductivityScore, v))
}

// ProductivityScoreIn applies the In predicate on the "productivity_score" field.
func ProductivityScoreIn(vs ...float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldIn(FieldProductivityScore, vs...))
}

// ProductivityScoreNotIn applies the NotIn predicate on the "productivity_score" field.
func ProductivityScoreNotIn(vs ...float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldNotIn(FieldProductivityScore, vs...))
}

// ProductivityScoreGT applies the GT predicate on the "productivity_score" field.
func ProductivityScoreGT(v float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldGT(FieldProductivityScore, v))
}

// ProductivityScoreGTE applies the GTE predicate on the "productivity_score" field.
func ProductivityScoreGTE(v float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldGTE(FieldProductivityScore, v))
}

// ProductivityScoreLT applies the LT predicate on the "productivity_score" field.
func ProductivityScoreLT(v float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldLT(FieldProductivityScore, v))
}

// ProductivityScoreLTE applies the LTE predicate on the "productivity_score" field.
func ProductivityScoreLTE(v float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldLTE(FieldProductivityScore, v))
}

// CollaborationScoreEQ applies the EQ predicate on the "collaboration_score" field.
func CollaborationScoreEQ(v float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldEQ(FieldCollaborationScore, v))
}

// CollaborationScoreNEQ applies the NEQ predicate on the "collaboration_score" field.
func CollaborationScoreNEQ(v float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldNEQ(FieldCollaborationScore, v))
}

// CollaborationScoreIn applies the In predicate on the "collaboration_score" field.
func CollaborationScoreIn(vs ...float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldIn(FieldCollaborationScore, vs...))
}

// CollaborationScoreNotIn applies the NotIn predicate on the "collaboration_score" field.
func CollaborationScoreNotIn(vs ...float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldNotIn(FieldCollaborationScore, vs...))
}

// CollaborationScoreGT applies the GT predicate on the "collaboration_score" field.
func CollaborationScoreGT(v float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldGT(FieldCollaborationScore, v))
}

// CollaborationScoreGTE applies the GTE predicate on the "collaboration_score" field.
func CollaborationScoreGTE(v float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldGTE(FieldCollaborationScore, v))
}

// CollaborationScoreLT applies the LT predicate on the "collaboration_score" field.
func CollaborationScoreLT(v float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldLT(FieldCollaborationScore, v))
}

// CollaborationScoreLTE applies the LTE predicate on the "collaboration_score" field.
func CollaborationScoreLTE(v float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldLTE(FieldCollaborationScore, v))
}

// DevelopmentScoreEQ applies the EQ predicate on the "development_score" field.
func DevelopmentScoreEQ(v float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldEQ(FieldDevelopmentScore, v))
}

// DevelopmentScoreNEQ applies the NEQ predicate on the "development_score" field.
func DevelopmentScoreNEQ(v float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldNEQ(FieldDevelopmentScore, v))
}

// DevelopmentScoreIn applies the In predicate on the "development_score" field.
func DevelopmentScoreIn(vs ...float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldIn(FieldDevelopmentScore, vs...))
}

// DevelopmentScoreNotIn applies the NotIn predicate on the "development_score" field.
func DevelopmentScoreNotIn(vs ...float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldNotIn(FieldDevelopmentScore, vs...))
}

// DevelopmentScoreGT applies the GT predicate on the "development_score" field.
func DevelopmentScoreGT(v float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldGT(FieldDevelopmentScore, v))
}

// DevelopmentScoreGTE applies the GTE predicate on the "development_score" field.
func DevelopmentScoreGTE(v float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldGTE(FieldDevelopmentScore, v))
}

// DevelopmentScoreLT applies the LT predicate on the "development_score" field.
func DevelopmentScoreLT(v float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldLT(FieldDevelopmentScore, v))
}

// DevelopmentScoreLTE applies the LTE predicate on the "development_score" field.
func DevelopmentScoreLTE(v float32) predicate.PaPc {
	return predicate.PaPc(sql.FieldLTE(FieldDevelopmentScore, v))
}

// PeriodEQ applies the EQ predicate on the "period" field.
func PeriodEQ(v string) predicate.PaPc {
	return predicate.PaPc(sql.FieldEQ(FieldPeriod, v))
}

// PeriodNEQ applies the NEQ predicate on the "period" field.
func PeriodNEQ(v string) predicate.PaPc {
	return predicate.PaPc(sql.FieldNEQ(FieldPeriod, v))
}

// PeriodIn applies the In predicate on the "period" field.
func PeriodIn(vs ...string) predicate.PaPc {
	return predicate.PaPc(sql.FieldIn(FieldPeriod, vs...))
}

// PeriodNotIn applies the NotIn predicate on the "period" field.
func PeriodNotIn(vs ...string) predicate.PaPc {
	return predicate.PaPc(sql.FieldNotIn(FieldPeriod, vs...))
}

// PeriodGT applies the GT predicate on the "period" field.
func PeriodGT(v string) predicate.PaPc {
	return predicate.PaPc(sql.FieldGT(FieldPeriod, v))
}

// PeriodGTE applies the GTE predicate on the "period" field.
func PeriodGTE(v string) predicate.PaPc {
	return predicate.PaPc(sql.FieldGTE(FieldPeriod, v))
}

// PeriodLT applies the LT predicate on the "period" field.
func PeriodLT(v string) predicate.PaPc {
	return predicate.PaPc(sql.FieldLT(FieldPeriod, v))
}

// PeriodLTE applies the LTE predicate on the "period" field.
func PeriodLTE(v string) predicate.PaPc {
	return predicate.PaPc(sql.FieldLTE(FieldPeriod, v))
}

// PeriodContains applies the Contains predicate on the "period" field.
func PeriodContains(v string) predicate.PaPc {
	return predicate.PaPc(sql.FieldContains(FieldPeriod, v))
}

// PeriodHasPrefix applies the HasPrefix predicate on the "period" field.
func PeriodHasPrefix(v string) predicate.PaPc {
	return predicate.PaPc(sql.FieldHasPrefix(FieldPeriod, v))
}

// PeriodHasSuffix applies the HasSuffix predicate on the "period" field.
func PeriodHasSuffix(v string) predicate.PaPc {
	return predicate.PaPc(sql.FieldHasSuffix(FieldPeriod, v))
}

// PeriodEqualFold applies the EqualFold predicate on the "period" field.
func PeriodEqualFold(v string) predicate.PaPc {
	return predicate.PaPc(sql.FieldEqualFold(FieldPeriod, v))
}

// PeriodContainsFold applies the ContainsFold predicate on the "period" field.
func PeriodContainsFold(v string) predicate.PaPc {
	return predicate.PaPc(sql.FieldContainsFold(FieldPeriod, v))
}

// HasMember applies the HasEdge predicate on the "member" edge.
func HasMember() predicate.PaPc {
	return predicate.PaPc(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MemberTable, MemberColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemberWith applies the HasEdge predicate on the "member" edge with a given conditions (other predicates).
func HasMemberWith(preds ...predicate.Member) predicate.PaPc {
	return predicate.PaPc(func(s *sql.Selector) {
		step := newMemberStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTechnicalScoreDetails applies the HasEdge predicate on the "technical_score_details" edge.
func HasTechnicalScoreDetails() predicate.PaPc {
	return predicate.PaPc(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TechnicalScoreDetailsTable, TechnicalScoreDetailsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTechnicalScoreDetailsWith applies the HasEdge predicate on the "technical_score_details" edge with a given conditions (other predicates).
func HasTechnicalScoreDetailsWith(preds ...predicate.PaPcTechnicalScore) predicate.PaPc {
	return predicate.PaPc(func(s *sql.Selector) {
		step := newTechnicalScoreDetailsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PaPc) predicate.PaPc {
	return predicate.PaPc(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PaPc) predicate.PaPc {
	return predicate.PaPc(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PaPc) predicate.PaPc {
	return predicate.PaPc(sql.NotPredicates(p))
}
