// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management/ent/member"
	"project-management/ent/papc"
	"project-management/ent/papctechnicalscore"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaPcCreate is the builder for creating a PaPc entity.
type PaPcCreate struct {
	config
	mutation *PaPcMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetMemberID sets the "member_id" field.
func (ppc *PaPcCreate) SetMemberID(i int) *PaPcCreate {
	ppc.mutation.SetMemberID(i)
	return ppc
}

// SetTechnicalScore sets the "technical_score" field.
func (ppc *PaPcCreate) SetTechnicalScore(f float32) *PaPcCreate {
	ppc.mutation.SetTechnicalScore(f)
	return ppc
}

// SetProductivityScore sets the "productivity_score" field.
func (ppc *PaPcCreate) SetProductivityScore(f float32) *PaPcCreate {
	ppc.mutation.SetProductivityScore(f)
	return ppc
}

// SetCollaborationScore sets the "collaboration_score" field.
func (ppc *PaPcCreate) SetCollaborationScore(f float32) *PaPcCreate {
	ppc.mutation.SetCollaborationScore(f)
	return ppc
}

// SetDevelopmentScore sets the "development_score" field.
func (ppc *PaPcCreate) SetDevelopmentScore(f float32) *PaPcCreate {
	ppc.mutation.SetDevelopmentScore(f)
	return ppc
}

// SetPeriod sets the "period" field.
func (ppc *PaPcCreate) SetPeriod(s string) *PaPcCreate {
	ppc.mutation.SetPeriod(s)
	return ppc
}

// SetNote sets the "note" field.
func (ppc *PaPcCreate) SetNote(s string) *PaPcCreate {
	ppc.mutation.SetNote(s)
	return ppc
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (ppc *PaPcCreate) SetNillableNote(s *string) *PaPcCreate {
	if s != nil {
		ppc.SetNote(*s)
	}
	return ppc
}

// SetID sets the "id" field.
func (ppc *PaPcCreate) SetID(i int) *PaPcCreate {
	ppc.mutation.SetID(i)
	return ppc
}

// SetMember sets the "member" edge to the Member entity.
func (ppc *PaPcCreate) SetMember(m *Member) *PaPcCreate {
	return ppc.SetMemberID(m.ID)
}

// AddTechnicalScoreDetailIDs adds the "technical_score_details" edge to the PaPcTechnicalScore entity by IDs.
func (ppc *PaPcCreate) AddTechnicalScoreDetailIDs(ids ...int) *PaPcCreate {
	ppc.mutation.AddTechnicalScoreDetailIDs(ids...)
	return ppc
}

// AddTechnicalScoreDetails adds the "technical_score_details" edges to the PaPcTechnicalScore entity.
func (ppc *PaPcCreate) AddTechnicalScoreDetails(p ...*PaPcTechnicalScore) *PaPcCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppc.AddTechnicalScoreDetailIDs(ids...)
}

// Mutation returns the PaPcMutation object of the builder.
func (ppc *PaPcCreate) Mutation() *PaPcMutation {
	return ppc.mutation
}

// Save creates the PaPc in the database.
func (ppc *PaPcCreate) Save(ctx context.Context) (*PaPc, error) {
	ppc.defaults()
	return withHooks(ctx, ppc.sqlSave, ppc.mutation, ppc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ppc *PaPcCreate) SaveX(ctx context.Context) *PaPc {
	v, err := ppc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppc *PaPcCreate) Exec(ctx context.Context) error {
	_, err := ppc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppc *PaPcCreate) ExecX(ctx context.Context) {
	if err := ppc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ppc *PaPcCreate) defaults() {
	if _, ok := ppc.mutation.Note(); !ok {
		v := papc.DefaultNote
		ppc.mutation.SetNote(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ppc *PaPcCreate) check() error {
	if _, ok := ppc.mutation.MemberID(); !ok {
		return &ValidationError{Name: "member_id", err: errors.New(`ent: missing required field "PaPc.member_id"`)}
	}
	if _, ok := ppc.mutation.TechnicalScore(); !ok {
		return &ValidationError{Name: "technical_score", err: errors.New(`ent: missing required field "PaPc.technical_score"`)}
	}
	if _, ok := ppc.mutation.ProductivityScore(); !ok {
		return &ValidationError{Name: "productivity_score", err: errors.New(`ent: missing required field "PaPc.productivity_score"`)}
	}
	if _, ok := ppc.mutation.CollaborationScore(); !ok {
		return &ValidationError{Name: "collaboration_score", err: errors.New(`ent: missing required field "PaPc.collaboration_score"`)}
	}
	if _, ok := ppc.mutation.DevelopmentScore(); !ok {
		return &ValidationError{Name: "development_score", err: errors.New(`ent: missing required field "PaPc.development_score"`)}
	}
	if _, ok := ppc.mutation.Period(); !ok {
		return &ValidationError{Name: "period", err: errors.New(`ent: missing required field "PaPc.period"`)}
	}
	if _, ok := ppc.mutation.Note(); !ok {
		return &ValidationError{Name: "note", err: errors.New(`ent: missing required field "PaPc.note"`)}
	}
	if _, ok := ppc.mutation.MemberID(); !ok {
		return &ValidationError{Name: "member", err: errors.New(`ent: missing required edge "PaPc.member"`)}
	}
	return nil
}

func (ppc *PaPcCreate) sqlSave(ctx context.Context) (*PaPc, error) {
	if err := ppc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ppc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ppc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ppc.mutation.id = &_node.ID
	ppc.mutation.done = true
	return _node, nil
}

func (ppc *PaPcCreate) createSpec() (*PaPc, *sqlgraph.CreateSpec) {
	var (
		_node = &PaPc{config: ppc.config}
		_spec = sqlgraph.NewCreateSpec(papc.Table, sqlgraph.NewFieldSpec(papc.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ppc.conflict
	if id, ok := ppc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ppc.mutation.TechnicalScore(); ok {
		_spec.SetField(papc.FieldTechnicalScore, field.TypeFloat32, value)
		_node.TechnicalScore = value
	}
	if value, ok := ppc.mutation.ProductivityScore(); ok {
		_spec.SetField(papc.FieldProductivityScore, field.TypeFloat32, value)
		_node.ProductivityScore = value
	}
	if value, ok := ppc.mutation.CollaborationScore(); ok {
		_spec.SetField(papc.FieldCollaborationScore, field.TypeFloat32, value)
		_node.CollaborationScore = value
	}
	if value, ok := ppc.mutation.DevelopmentScore(); ok {
		_spec.SetField(papc.FieldDevelopmentScore, field.TypeFloat32, value)
		_node.DevelopmentScore = value
	}
	if value, ok := ppc.mutation.Period(); ok {
		_spec.SetField(papc.FieldPeriod, field.TypeString, value)
		_node.Period = value
	}
	if value, ok := ppc.mutation.Note(); ok {
		_spec.SetField(papc.FieldNote, field.TypeString, value)
		_node.Note = value
	}
	if nodes := ppc.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   papc.MemberTable,
			Columns: []string{papc.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MemberID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ppc.mutation.TechnicalScoreDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   papc.TechnicalScoreDetailsTable,
			Columns: []string{papc.TechnicalScoreDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(papctechnicalscore.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PaPc.Create().
//		SetMemberID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaPcUpsert) {
//			SetMemberID(v+v).
//		}).
//		Exec(ctx)
func (ppc *PaPcCreate) OnConflict(opts ...sql.ConflictOption) *PaPcUpsertOne {
	ppc.conflict = opts
	return &PaPcUpsertOne{
		create: ppc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PaPc.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ppc *PaPcCreate) OnConflictColumns(columns ...string) *PaPcUpsertOne {
	ppc.conflict = append(ppc.conflict, sql.ConflictColumns(columns...))
	return &PaPcUpsertOne{
		create: ppc,
	}
}

type (
	// PaPcUpsertOne is the builder for "upsert"-ing
	//  one PaPc node.
	PaPcUpsertOne struct {
		create *PaPcCreate
	}

	// PaPcUpsert is the "OnConflict" setter.
	PaPcUpsert struct {
		*sql.UpdateSet
	}
)

// SetMemberID sets the "member_id" field.
func (u *PaPcUpsert) SetMemberID(v int) *PaPcUpsert {
	u.Set(papc.FieldMemberID, v)
	return u
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *PaPcUpsert) UpdateMemberID() *PaPcUpsert {
	u.SetExcluded(papc.FieldMemberID)
	return u
}

// SetTechnicalScore sets the "technical_score" field.
func (u *PaPcUpsert) SetTechnicalScore(v float32) *PaPcUpsert {
	u.Set(papc.FieldTechnicalScore, v)
	return u
}

// UpdateTechnicalScore sets the "technical_score" field to the value that was provided on create.
func (u *PaPcUpsert) UpdateTechnicalScore() *PaPcUpsert {
	u.SetExcluded(papc.FieldTechnicalScore)
	return u
}

// AddTechnicalScore adds v to the "technical_score" field.
func (u *PaPcUpsert) AddTechnicalScore(v float32) *PaPcUpsert {
	u.Add(papc.FieldTechnicalScore, v)
	return u
}

// SetProductivityScore sets the "productivity_score" field.
func (u *PaPcUpsert) SetProductivityScore(v float32) *PaPcUpsert {
	u.Set(papc.FieldProductivityScore, v)
	return u
}

// UpdateProductivityScore sets the "productivity_score" field to the value that was provided on create.
func (u *PaPcUpsert) UpdateProductivityScore() *PaPcUpsert {
	u.SetExcluded(papc.FieldProductivityScore)
	return u
}

// AddProductivityScore adds v to the "productivity_score" field.
func (u *PaPcUpsert) AddProductivityScore(v float32) *PaPcUpsert {
	u.Add(papc.FieldProductivityScore, v)
	return u
}

// SetCollaborationScore sets the "collaboration_score" field.
func (u *PaPcUpsert) SetCollaborationScore(v float32) *PaPcUpsert {
	u.Set(papc.FieldCollaborationScore, v)
	return u
}

// UpdateCollaborationScore sets the "collaboration_score" field to the value that was provided on create.
func (u *PaPcUpsert) UpdateCollaborationScore() *PaPcUpsert {
	u.SetExcluded(papc.FieldCollaborationScore)
	return u
}

// AddCollaborationScore adds v to the "collaboration_score" field.
func (u *PaPcUpsert) AddCollaborationScore(v float32) *PaPcUpsert {
	u.Add(papc.FieldCollaborationScore, v)
	return u
}

// SetDevelopmentScore sets the "development_score" field.
func (u *PaPcUpsert) SetDevelopmentScore(v float32) *PaPcUpsert {
	u.Set(papc.FieldDevelopmentScore, v)
	return u
}

// UpdateDevelopmentScore sets the "development_score" field to the value that was provided on create.
func (u *PaPcUpsert) UpdateDevelopmentScore() *PaPcUpsert {
	u.SetExcluded(papc.FieldDevelopmentScore)
	return u
}

// AddDevelopmentScore adds v to the "development_score" field.
func (u *PaPcUpsert) AddDevelopmentScore(v float32) *PaPcUpsert {
	u.Add(papc.FieldDevelopmentScore, v)
	return u
}

// SetPeriod sets the "period" field.
func (u *PaPcUpsert) SetPeriod(v string) *PaPcUpsert {
	u.Set(papc.FieldPeriod, v)
	return u
}

// UpdatePeriod sets the "period" field to the value that was provided on create.
func (u *PaPcUpsert) UpdatePeriod() *PaPcUpsert {
	u.SetExcluded(papc.FieldPeriod)
	return u
}

// SetNote sets the "note" field.
func (u *PaPcUpsert) SetNote(v string) *PaPcUpsert {
	u.Set(papc.FieldNote, v)
	return u
}

// UpdateNote sets the "note" field to the value that was provided on create.
func (u *PaPcUpsert) UpdateNote() *PaPcUpsert {
	u.SetExcluded(papc.FieldNote)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PaPc.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(papc.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PaPcUpsertOne) UpdateNewValues() *PaPcUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(papc.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PaPc.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PaPcUpsertOne) Ignore() *PaPcUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaPcUpsertOne) DoNothing() *PaPcUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaPcCreate.OnConflict
// documentation for more info.
func (u *PaPcUpsertOne) Update(set func(*PaPcUpsert)) *PaPcUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaPcUpsert{UpdateSet: update})
	}))
	return u
}

// SetMemberID sets the "member_id" field.
func (u *PaPcUpsertOne) SetMemberID(v int) *PaPcUpsertOne {
	return u.Update(func(s *PaPcUpsert) {
		s.SetMemberID(v)
	})
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *PaPcUpsertOne) UpdateMemberID() *PaPcUpsertOne {
	return u.Update(func(s *PaPcUpsert) {
		s.UpdateMemberID()
	})
}

// SetTechnicalScore sets the "technical_score" field.
func (u *PaPcUpsertOne) SetTechnicalScore(v float32) *PaPcUpsertOne {
	return u.Update(func(s *PaPcUpsert) {
		s.SetTechnicalScore(v)
	})
}

// AddTechnicalScore adds v to the "technical_score" field.
func (u *PaPcUpsertOne) AddTechnicalScore(v float32) *PaPcUpsertOne {
	return u.Update(func(s *PaPcUpsert) {
		s.AddTechnicalScore(v)
	})
}

// UpdateTechnicalScore sets the "technical_score" field to the value that was provided on create.
func (u *PaPcUpsertOne) UpdateTechnicalScore() *PaPcUpsertOne {
	return u.Update(func(s *PaPcUpsert) {
		s.UpdateTechnicalScore()
	})
}

// SetProductivityScore sets the "productivity_score" field.
func (u *PaPcUpsertOne) SetProductivityScore(v float32) *PaPcUpsertOne {
	return u.Update(func(s *PaPcUpsert) {
		s.SetProductivityScore(v)
	})
}

// AddProductivityScore adds v to the "productivity_score" field.
func (u *PaPcUpsertOne) AddProductivityScore(v float32) *PaPcUpsertOne {
	return u.Update(func(s *PaPcUpsert) {
		s.AddProductivityScore(v)
	})
}

// UpdateProductivityScore sets the "productivity_score" field to the value that was provided on create.
func (u *PaPcUpsertOne) UpdateProductivityScore() *PaPcUpsertOne {
	return u.Update(func(s *PaPcUpsert) {
		s.UpdateProductivityScore()
	})
}

// SetCollaborationScore sets the "collaboration_score" field.
func (u *PaPcUpsertOne) SetCollaborationScore(v float32) *PaPcUpsertOne {
	return u.Update(func(s *PaPcUpsert) {
		s.SetCollaborationScore(v)
	})
}

// AddCollaborationScore adds v to the "collaboration_score" field.
func (u *PaPcUpsertOne) AddCollaborationScore(v float32) *PaPcUpsertOne {
	return u.Update(func(s *PaPcUpsert) {
		s.AddCollaborationScore(v)
	})
}

// UpdateCollaborationScore sets the "collaboration_score" field to the value that was provided on create.
func (u *PaPcUpsertOne) UpdateCollaborationScore() *PaPcUpsertOne {
	return u.Update(func(s *PaPcUpsert) {
		s.UpdateCollaborationScore()
	})
}

// SetDevelopmentScore sets the "development_score" field.
func (u *PaPcUpsertOne) SetDevelopmentScore(v float32) *PaPcUpsertOne {
	return u.Update(func(s *PaPcUpsert) {
		s.SetDevelopmentScore(v)
	})
}

// AddDevelopmentScore adds v to the "development_score" field.
func (u *PaPcUpsertOne) AddDevelopmentScore(v float32) *PaPcUpsertOne {
	return u.Update(func(s *PaPcUpsert) {
		s.AddDevelopmentScore(v)
	})
}

// UpdateDevelopmentScore sets the "development_score" field to the value that was provided on create.
func (u *PaPcUpsertOne) UpdateDevelopmentScore() *PaPcUpsertOne {
	return u.Update(func(s *PaPcUpsert) {
		s.UpdateDevelopmentScore()
	})
}

// SetPeriod sets the "period" field.
func (u *PaPcUpsertOne) SetPeriod(v string) *PaPcUpsertOne {
	return u.Update(func(s *PaPcUpsert) {
		s.SetPeriod(v)
	})
}

// UpdatePeriod sets the "period" field to the value that was provided on create.
func (u *PaPcUpsertOne) UpdatePeriod() *PaPcUpsertOne {
	return u.Update(func(s *PaPcUpsert) {
		s.UpdatePeriod()
	})
}

// SetNote sets the "note" field.
func (u *PaPcUpsertOne) SetNote(v string) *PaPcUpsertOne {
	return u.Update(func(s *PaPcUpsert) {
		s.SetNote(v)
	})
}

// UpdateNote sets the "note" field to the value that was provided on create.
func (u *PaPcUpsertOne) UpdateNote() *PaPcUpsertOne {
	return u.Update(func(s *PaPcUpsert) {
		s.UpdateNote()
	})
}

// Exec executes the query.
func (u *PaPcUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PaPcCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaPcUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PaPcUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PaPcUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PaPcCreateBulk is the builder for creating many PaPc entities in bulk.
type PaPcCreateBulk struct {
	config
	err      error
	builders []*PaPcCreate
	conflict []sql.ConflictOption
}

// Save creates the PaPc entities in the database.
func (ppcb *PaPcCreateBulk) Save(ctx context.Context) ([]*PaPc, error) {
	if ppcb.err != nil {
		return nil, ppcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ppcb.builders))
	nodes := make([]*PaPc, len(ppcb.builders))
	mutators := make([]Mutator, len(ppcb.builders))
	for i := range ppcb.builders {
		func(i int, root context.Context) {
			builder := ppcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaPcMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ppcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ppcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ppcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ppcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ppcb *PaPcCreateBulk) SaveX(ctx context.Context) []*PaPc {
	v, err := ppcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ppcb *PaPcCreateBulk) Exec(ctx context.Context) error {
	_, err := ppcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppcb *PaPcCreateBulk) ExecX(ctx context.Context) {
	if err := ppcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PaPc.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PaPcUpsert) {
//			SetMemberID(v+v).
//		}).
//		Exec(ctx)
func (ppcb *PaPcCreateBulk) OnConflict(opts ...sql.ConflictOption) *PaPcUpsertBulk {
	ppcb.conflict = opts
	return &PaPcUpsertBulk{
		create: ppcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PaPc.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ppcb *PaPcCreateBulk) OnConflictColumns(columns ...string) *PaPcUpsertBulk {
	ppcb.conflict = append(ppcb.conflict, sql.ConflictColumns(columns...))
	return &PaPcUpsertBulk{
		create: ppcb,
	}
}

// PaPcUpsertBulk is the builder for "upsert"-ing
// a bulk of PaPc nodes.
type PaPcUpsertBulk struct {
	create *PaPcCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PaPc.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(papc.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PaPcUpsertBulk) UpdateNewValues() *PaPcUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(papc.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PaPc.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PaPcUpsertBulk) Ignore() *PaPcUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PaPcUpsertBulk) DoNothing() *PaPcUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PaPcCreateBulk.OnConflict
// documentation for more info.
func (u *PaPcUpsertBulk) Update(set func(*PaPcUpsert)) *PaPcUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PaPcUpsert{UpdateSet: update})
	}))
	return u
}

// SetMemberID sets the "member_id" field.
func (u *PaPcUpsertBulk) SetMemberID(v int) *PaPcUpsertBulk {
	return u.Update(func(s *PaPcUpsert) {
		s.SetMemberID(v)
	})
}

// UpdateMemberID sets the "member_id" field to the value that was provided on create.
func (u *PaPcUpsertBulk) UpdateMemberID() *PaPcUpsertBulk {
	return u.Update(func(s *PaPcUpsert) {
		s.UpdateMemberID()
	})
}

// SetTechnicalScore sets the "technical_score" field.
func (u *PaPcUpsertBulk) SetTechnicalScore(v float32) *PaPcUpsertBulk {
	return u.Update(func(s *PaPcUpsert) {
		s.SetTechnicalScore(v)
	})
}

// AddTechnicalScore adds v to the "technical_score" field.
func (u *PaPcUpsertBulk) AddTechnicalScore(v float32) *PaPcUpsertBulk {
	return u.Update(func(s *PaPcUpsert) {
		s.AddTechnicalScore(v)
	})
}

// UpdateTechnicalScore sets the "technical_score" field to the value that was provided on create.
func (u *PaPcUpsertBulk) UpdateTechnicalScore() *PaPcUpsertBulk {
	return u.Update(func(s *PaPcUpsert) {
		s.UpdateTechnicalScore()
	})
}

// SetProductivityScore sets the "productivity_score" field.
func (u *PaPcUpsertBulk) SetProductivityScore(v float32) *PaPcUpsertBulk {
	return u.Update(func(s *PaPcUpsert) {
		s.SetProductivityScore(v)
	})
}

// AddProductivityScore adds v to the "productivity_score" field.
func (u *PaPcUpsertBulk) AddProductivityScore(v float32) *PaPcUpsertBulk {
	return u.Update(func(s *PaPcUpsert) {
		s.AddProductivityScore(v)
	})
}

// UpdateProductivityScore sets the "productivity_score" field to the value that was provided on create.
func (u *PaPcUpsertBulk) UpdateProductivityScore() *PaPcUpsertBulk {
	return u.Update(func(s *PaPcUpsert) {
		s.UpdateProductivityScore()
	})
}

// SetCollaborationScore sets the "collaboration_score" field.
func (u *PaPcUpsertBulk) SetCollaborationScore(v float32) *PaPcUpsertBulk {
	return u.Update(func(s *PaPcUpsert) {
		s.SetCollaborationScore(v)
	})
}

// AddCollaborationScore adds v to the "collaboration_score" field.
func (u *PaPcUpsertBulk) AddCollaborationScore(v float32) *PaPcUpsertBulk {
	return u.Update(func(s *PaPcUpsert) {
		s.AddCollaborationScore(v)
	})
}

// UpdateCollaborationScore sets the "collaboration_score" field to the value that was provided on create.
func (u *PaPcUpsertBulk) UpdateCollaborationScore() *PaPcUpsertBulk {
	return u.Update(func(s *PaPcUpsert) {
		s.UpdateCollaborationScore()
	})
}

// SetDevelopmentScore sets the "development_score" field.
func (u *PaPcUpsertBulk) SetDevelopmentScore(v float32) *PaPcUpsertBulk {
	return u.Update(func(s *PaPcUpsert) {
		s.SetDevelopmentScore(v)
	})
}

// AddDevelopmentScore adds v to the "development_score" field.
func (u *PaPcUpsertBulk) AddDevelopmentScore(v float32) *PaPcUpsertBulk {
	return u.Update(func(s *PaPcUpsert) {
		s.AddDevelopmentScore(v)
	})
}

// UpdateDevelopmentScore sets the "development_score" field to the value that was provided on create.
func (u *PaPcUpsertBulk) UpdateDevelopmentScore() *PaPcUpsertBulk {
	return u.Update(func(s *PaPcUpsert) {
		s.UpdateDevelopmentScore()
	})
}

// SetPeriod sets the "period" field.
func (u *PaPcUpsertBulk) SetPeriod(v string) *PaPcUpsertBulk {
	return u.Update(func(s *PaPcUpsert) {
		s.SetPeriod(v)
	})
}

// UpdatePeriod sets the "period" field to the value that was provided on create.
func (u *PaPcUpsertBulk) UpdatePeriod() *PaPcUpsertBulk {
	return u.Update(func(s *PaPcUpsert) {
		s.UpdatePeriod()
	})
}

// SetNote sets the "note" field.
func (u *PaPcUpsertBulk) SetNote(v string) *PaPcUpsertBulk {
	return u.Update(func(s *PaPcUpsert) {
		s.SetNote(v)
	})
}

// UpdateNote sets the "note" field to the value that was provided on create.
func (u *PaPcUpsertBulk) UpdateNote() *PaPcUpsertBulk {
	return u.Update(func(s *PaPcUpsert) {
		s.UpdateNote()
	})
}

// Exec executes the query.
func (u *PaPcUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PaPcCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PaPcCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PaPcUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
