// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"project-management/ent/member"
	"project-management/ent/papc"
	"project-management/ent/papctechnicalscore"
	"project-management/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PaPcUpdate is the builder for updating PaPc entities.
type PaPcUpdate struct {
	config
	hooks    []Hook
	mutation *PaPcMutation
}

// Where appends a list predicates to the PaPcUpdate builder.
func (ppu *PaPcUpdate) Where(ps ...predicate.PaPc) *PaPcUpdate {
	ppu.mutation.Where(ps...)
	return ppu
}

// SetMemberID sets the "member_id" field.
func (ppu *PaPcUpdate) SetMemberID(i int) *PaPcUpdate {
	ppu.mutation.SetMemberID(i)
	return ppu
}

// SetTechnicalScore sets the "technical_score" field.
func (ppu *PaPcUpdate) SetTechnicalScore(f float32) *PaPcUpdate {
	ppu.mutation.ResetTechnicalScore()
	ppu.mutation.SetTechnicalScore(f)
	return ppu
}

// AddTechnicalScore adds f to the "technical_score" field.
func (ppu *PaPcUpdate) AddTechnicalScore(f float32) *PaPcUpdate {
	ppu.mutation.AddTechnicalScore(f)
	return ppu
}

// SetProductivityScore sets the "productivity_score" field.
func (ppu *PaPcUpdate) SetProductivityScore(f float32) *PaPcUpdate {
	ppu.mutation.ResetProductivityScore()
	ppu.mutation.SetProductivityScore(f)
	return ppu
}

// AddProductivityScore adds f to the "productivity_score" field.
func (ppu *PaPcUpdate) AddProductivityScore(f float32) *PaPcUpdate {
	ppu.mutation.AddProductivityScore(f)
	return ppu
}

// SetCollaborationScore sets the "collaboration_score" field.
func (ppu *PaPcUpdate) SetCollaborationScore(f float32) *PaPcUpdate {
	ppu.mutation.ResetCollaborationScore()
	ppu.mutation.SetCollaborationScore(f)
	return ppu
}

// AddCollaborationScore adds f to the "collaboration_score" field.
func (ppu *PaPcUpdate) AddCollaborationScore(f float32) *PaPcUpdate {
	ppu.mutation.AddCollaborationScore(f)
	return ppu
}

// SetDevelopmentScore sets the "development_score" field.
func (ppu *PaPcUpdate) SetDevelopmentScore(f float32) *PaPcUpdate {
	ppu.mutation.ResetDevelopmentScore()
	ppu.mutation.SetDevelopmentScore(f)
	return ppu
}

// AddDevelopmentScore adds f to the "development_score" field.
func (ppu *PaPcUpdate) AddDevelopmentScore(f float32) *PaPcUpdate {
	ppu.mutation.AddDevelopmentScore(f)
	return ppu
}

// SetPeriod sets the "period" field.
func (ppu *PaPcUpdate) SetPeriod(s string) *PaPcUpdate {
	ppu.mutation.SetPeriod(s)
	return ppu
}

// SetMember sets the "member" edge to the Member entity.
func (ppu *PaPcUpdate) SetMember(m *Member) *PaPcUpdate {
	return ppu.SetMemberID(m.ID)
}

// AddTechnicalScoreDetailIDs adds the "technical_score_details" edge to the PaPcTechnicalScore entity by IDs.
func (ppu *PaPcUpdate) AddTechnicalScoreDetailIDs(ids ...int) *PaPcUpdate {
	ppu.mutation.AddTechnicalScoreDetailIDs(ids...)
	return ppu
}

// AddTechnicalScoreDetails adds the "technical_score_details" edges to the PaPcTechnicalScore entity.
func (ppu *PaPcUpdate) AddTechnicalScoreDetails(p ...*PaPcTechnicalScore) *PaPcUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppu.AddTechnicalScoreDetailIDs(ids...)
}

// Mutation returns the PaPcMutation object of the builder.
func (ppu *PaPcUpdate) Mutation() *PaPcMutation {
	return ppu.mutation
}

// ClearMember clears the "member" edge to the Member entity.
func (ppu *PaPcUpdate) ClearMember() *PaPcUpdate {
	ppu.mutation.ClearMember()
	return ppu
}

// ClearTechnicalScoreDetails clears all "technical_score_details" edges to the PaPcTechnicalScore entity.
func (ppu *PaPcUpdate) ClearTechnicalScoreDetails() *PaPcUpdate {
	ppu.mutation.ClearTechnicalScoreDetails()
	return ppu
}

// RemoveTechnicalScoreDetailIDs removes the "technical_score_details" edge to PaPcTechnicalScore entities by IDs.
func (ppu *PaPcUpdate) RemoveTechnicalScoreDetailIDs(ids ...int) *PaPcUpdate {
	ppu.mutation.RemoveTechnicalScoreDetailIDs(ids...)
	return ppu
}

// RemoveTechnicalScoreDetails removes "technical_score_details" edges to PaPcTechnicalScore entities.
func (ppu *PaPcUpdate) RemoveTechnicalScoreDetails(p ...*PaPcTechnicalScore) *PaPcUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppu.RemoveTechnicalScoreDetailIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ppu *PaPcUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ppu.sqlSave, ppu.mutation, ppu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppu *PaPcUpdate) SaveX(ctx context.Context) int {
	affected, err := ppu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ppu *PaPcUpdate) Exec(ctx context.Context) error {
	_, err := ppu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppu *PaPcUpdate) ExecX(ctx context.Context) {
	if err := ppu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ppu *PaPcUpdate) check() error {
	if _, ok := ppu.mutation.MemberID(); ppu.mutation.MemberCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PaPc.member"`)
	}
	return nil
}

func (ppu *PaPcUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ppu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(papc.Table, papc.Columns, sqlgraph.NewFieldSpec(papc.FieldID, field.TypeInt))
	if ps := ppu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppu.mutation.TechnicalScore(); ok {
		_spec.SetField(papc.FieldTechnicalScore, field.TypeFloat32, value)
	}
	if value, ok := ppu.mutation.AddedTechnicalScore(); ok {
		_spec.AddField(papc.FieldTechnicalScore, field.TypeFloat32, value)
	}
	if value, ok := ppu.mutation.ProductivityScore(); ok {
		_spec.SetField(papc.FieldProductivityScore, field.TypeFloat32, value)
	}
	if value, ok := ppu.mutation.AddedProductivityScore(); ok {
		_spec.AddField(papc.FieldProductivityScore, field.TypeFloat32, value)
	}
	if value, ok := ppu.mutation.CollaborationScore(); ok {
		_spec.SetField(papc.FieldCollaborationScore, field.TypeFloat32, value)
	}
	if value, ok := ppu.mutation.AddedCollaborationScore(); ok {
		_spec.AddField(papc.FieldCollaborationScore, field.TypeFloat32, value)
	}
	if value, ok := ppu.mutation.DevelopmentScore(); ok {
		_spec.SetField(papc.FieldDevelopmentScore, field.TypeFloat32, value)
	}
	if value, ok := ppu.mutation.AddedDevelopmentScore(); ok {
		_spec.AddField(papc.FieldDevelopmentScore, field.TypeFloat32, value)
	}
	if value, ok := ppu.mutation.Period(); ok {
		_spec.SetField(papc.FieldPeriod, field.TypeString, value)
	}
	if ppu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   papc.MemberTable,
			Columns: []string{papc.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   papc.MemberTable,
			Columns: []string{papc.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppu.mutation.TechnicalScoreDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   papc.TechnicalScoreDetailsTable,
			Columns: []string{papc.TechnicalScoreDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(papctechnicalscore.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.RemovedTechnicalScoreDetailsIDs(); len(nodes) > 0 && !ppu.mutation.TechnicalScoreDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   papc.TechnicalScoreDetailsTable,
			Columns: []string{papc.TechnicalScoreDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(papctechnicalscore.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppu.mutation.TechnicalScoreDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   papc.TechnicalScoreDetailsTable,
			Columns: []string{papc.TechnicalScoreDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(papctechnicalscore.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ppu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{papc.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ppu.mutation.done = true
	return n, nil
}

// PaPcUpdateOne is the builder for updating a single PaPc entity.
type PaPcUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaPcMutation
}

// SetMemberID sets the "member_id" field.
func (ppuo *PaPcUpdateOne) SetMemberID(i int) *PaPcUpdateOne {
	ppuo.mutation.SetMemberID(i)
	return ppuo
}

// SetTechnicalScore sets the "technical_score" field.
func (ppuo *PaPcUpdateOne) SetTechnicalScore(f float32) *PaPcUpdateOne {
	ppuo.mutation.ResetTechnicalScore()
	ppuo.mutation.SetTechnicalScore(f)
	return ppuo
}

// AddTechnicalScore adds f to the "technical_score" field.
func (ppuo *PaPcUpdateOne) AddTechnicalScore(f float32) *PaPcUpdateOne {
	ppuo.mutation.AddTechnicalScore(f)
	return ppuo
}

// SetProductivityScore sets the "productivity_score" field.
func (ppuo *PaPcUpdateOne) SetProductivityScore(f float32) *PaPcUpdateOne {
	ppuo.mutation.ResetProductivityScore()
	ppuo.mutation.SetProductivityScore(f)
	return ppuo
}

// AddProductivityScore adds f to the "productivity_score" field.
func (ppuo *PaPcUpdateOne) AddProductivityScore(f float32) *PaPcUpdateOne {
	ppuo.mutation.AddProductivityScore(f)
	return ppuo
}

// SetCollaborationScore sets the "collaboration_score" field.
func (ppuo *PaPcUpdateOne) SetCollaborationScore(f float32) *PaPcUpdateOne {
	ppuo.mutation.ResetCollaborationScore()
	ppuo.mutation.SetCollaborationScore(f)
	return ppuo
}

// AddCollaborationScore adds f to the "collaboration_score" field.
func (ppuo *PaPcUpdateOne) AddCollaborationScore(f float32) *PaPcUpdateOne {
	ppuo.mutation.AddCollaborationScore(f)
	return ppuo
}

// SetDevelopmentScore sets the "development_score" field.
func (ppuo *PaPcUpdateOne) SetDevelopmentScore(f float32) *PaPcUpdateOne {
	ppuo.mutation.ResetDevelopmentScore()
	ppuo.mutation.SetDevelopmentScore(f)
	return ppuo
}

// AddDevelopmentScore adds f to the "development_score" field.
func (ppuo *PaPcUpdateOne) AddDevelopmentScore(f float32) *PaPcUpdateOne {
	ppuo.mutation.AddDevelopmentScore(f)
	return ppuo
}

// SetPeriod sets the "period" field.
func (ppuo *PaPcUpdateOne) SetPeriod(s string) *PaPcUpdateOne {
	ppuo.mutation.SetPeriod(s)
	return ppuo
}

// SetMember sets the "member" edge to the Member entity.
func (ppuo *PaPcUpdateOne) SetMember(m *Member) *PaPcUpdateOne {
	return ppuo.SetMemberID(m.ID)
}

// AddTechnicalScoreDetailIDs adds the "technical_score_details" edge to the PaPcTechnicalScore entity by IDs.
func (ppuo *PaPcUpdateOne) AddTechnicalScoreDetailIDs(ids ...int) *PaPcUpdateOne {
	ppuo.mutation.AddTechnicalScoreDetailIDs(ids...)
	return ppuo
}

// AddTechnicalScoreDetails adds the "technical_score_details" edges to the PaPcTechnicalScore entity.
func (ppuo *PaPcUpdateOne) AddTechnicalScoreDetails(p ...*PaPcTechnicalScore) *PaPcUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppuo.AddTechnicalScoreDetailIDs(ids...)
}

// Mutation returns the PaPcMutation object of the builder.
func (ppuo *PaPcUpdateOne) Mutation() *PaPcMutation {
	return ppuo.mutation
}

// ClearMember clears the "member" edge to the Member entity.
func (ppuo *PaPcUpdateOne) ClearMember() *PaPcUpdateOne {
	ppuo.mutation.ClearMember()
	return ppuo
}

// ClearTechnicalScoreDetails clears all "technical_score_details" edges to the PaPcTechnicalScore entity.
func (ppuo *PaPcUpdateOne) ClearTechnicalScoreDetails() *PaPcUpdateOne {
	ppuo.mutation.ClearTechnicalScoreDetails()
	return ppuo
}

// RemoveTechnicalScoreDetailIDs removes the "technical_score_details" edge to PaPcTechnicalScore entities by IDs.
func (ppuo *PaPcUpdateOne) RemoveTechnicalScoreDetailIDs(ids ...int) *PaPcUpdateOne {
	ppuo.mutation.RemoveTechnicalScoreDetailIDs(ids...)
	return ppuo
}

// RemoveTechnicalScoreDetails removes "technical_score_details" edges to PaPcTechnicalScore entities.
func (ppuo *PaPcUpdateOne) RemoveTechnicalScoreDetails(p ...*PaPcTechnicalScore) *PaPcUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ppuo.RemoveTechnicalScoreDetailIDs(ids...)
}

// Where appends a list predicates to the PaPcUpdate builder.
func (ppuo *PaPcUpdateOne) Where(ps ...predicate.PaPc) *PaPcUpdateOne {
	ppuo.mutation.Where(ps...)
	return ppuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ppuo *PaPcUpdateOne) Select(field string, fields ...string) *PaPcUpdateOne {
	ppuo.fields = append([]string{field}, fields...)
	return ppuo
}

// Save executes the query and returns the updated PaPc entity.
func (ppuo *PaPcUpdateOne) Save(ctx context.Context) (*PaPc, error) {
	return withHooks(ctx, ppuo.sqlSave, ppuo.mutation, ppuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ppuo *PaPcUpdateOne) SaveX(ctx context.Context) *PaPc {
	node, err := ppuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ppuo *PaPcUpdateOne) Exec(ctx context.Context) error {
	_, err := ppuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ppuo *PaPcUpdateOne) ExecX(ctx context.Context) {
	if err := ppuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ppuo *PaPcUpdateOne) check() error {
	if _, ok := ppuo.mutation.MemberID(); ppuo.mutation.MemberCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PaPc.member"`)
	}
	return nil
}

func (ppuo *PaPcUpdateOne) sqlSave(ctx context.Context) (_node *PaPc, err error) {
	if err := ppuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(papc.Table, papc.Columns, sqlgraph.NewFieldSpec(papc.FieldID, field.TypeInt))
	id, ok := ppuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PaPc.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ppuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, papc.FieldID)
		for _, f := range fields {
			if !papc.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != papc.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ppuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ppuo.mutation.TechnicalScore(); ok {
		_spec.SetField(papc.FieldTechnicalScore, field.TypeFloat32, value)
	}
	if value, ok := ppuo.mutation.AddedTechnicalScore(); ok {
		_spec.AddField(papc.FieldTechnicalScore, field.TypeFloat32, value)
	}
	if value, ok := ppuo.mutation.ProductivityScore(); ok {
		_spec.SetField(papc.FieldProductivityScore, field.TypeFloat32, value)
	}
	if value, ok := ppuo.mutation.AddedProductivityScore(); ok {
		_spec.AddField(papc.FieldProductivityScore, field.TypeFloat32, value)
	}
	if value, ok := ppuo.mutation.CollaborationScore(); ok {
		_spec.SetField(papc.FieldCollaborationScore, field.TypeFloat32, value)
	}
	if value, ok := ppuo.mutation.AddedCollaborationScore(); ok {
		_spec.AddField(papc.FieldCollaborationScore, field.TypeFloat32, value)
	}
	if value, ok := ppuo.mutation.DevelopmentScore(); ok {
		_spec.SetField(papc.FieldDevelopmentScore, field.TypeFloat32, value)
	}
	if value, ok := ppuo.mutation.AddedDevelopmentScore(); ok {
		_spec.AddField(papc.FieldDevelopmentScore, field.TypeFloat32, value)
	}
	if value, ok := ppuo.mutation.Period(); ok {
		_spec.SetField(papc.FieldPeriod, field.TypeString, value)
	}
	if ppuo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   papc.MemberTable,
			Columns: []string{papc.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   papc.MemberTable,
			Columns: []string{papc.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ppuo.mutation.TechnicalScoreDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   papc.TechnicalScoreDetailsTable,
			Columns: []string{papc.TechnicalScoreDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(papctechnicalscore.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.RemovedTechnicalScoreDetailsIDs(); len(nodes) > 0 && !ppuo.mutation.TechnicalScoreDetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   papc.TechnicalScoreDetailsTable,
			Columns: []string{papc.TechnicalScoreDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(papctechnicalscore.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ppuo.mutation.TechnicalScoreDetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   papc.TechnicalScoreDetailsTable,
			Columns: []string{papc.TechnicalScoreDetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(papctechnicalscore.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PaPc{config: ppuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ppuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{papc.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ppuo.mutation.done = true
	return _node, nil
}
