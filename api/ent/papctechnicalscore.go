// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"project-management/ent/papc"
	"project-management/ent/papctechnicalscore"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PaPcTechnicalScore is the model entity for the PaPcTechnicalScore schema.
type PaPcTechnicalScore struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PaPcID holds the value of the "pa_pc_id" field.
	PaPcID int `json:"pa_pc_id,omitempty"`
	// Type holds the value of the "type" field.
	Type papctechnicalscore.Type `json:"type,omitempty"`
	// Skill holds the value of the "skill" field.
	Skill string `json:"skill,omitempty"`
	// SelfScore holds the value of the "self_score" field.
	SelfScore float32 `json:"self_score,omitempty"`
	// PeerScore holds the value of the "peer_score" field.
	PeerScore *float32 `json:"peer_score,omitempty"`
	// ManagerScore holds the value of the "manager_score" field.
	ManagerScore float32 `json:"manager_score,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PaPcTechnicalScoreQuery when eager-loading is set.
	Edges        PaPcTechnicalScoreEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PaPcTechnicalScoreEdges holds the relations/edges for other nodes in the graph.
type PaPcTechnicalScoreEdges struct {
	// PaPc holds the value of the pa_pc edge.
	PaPc *PaPc `json:"pa_pc,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PaPcOrErr returns the PaPc value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PaPcTechnicalScoreEdges) PaPcOrErr() (*PaPc, error) {
	if e.loadedTypes[0] {
		if e.PaPc == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: papc.Label}
		}
		return e.PaPc, nil
	}
	return nil, &NotLoadedError{edge: "pa_pc"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaPcTechnicalScore) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case papctechnicalscore.FieldSelfScore, papctechnicalscore.FieldPeerScore, papctechnicalscore.FieldManagerScore:
			values[i] = new(sql.NullFloat64)
		case papctechnicalscore.FieldID, papctechnicalscore.FieldPaPcID:
			values[i] = new(sql.NullInt64)
		case papctechnicalscore.FieldType, papctechnicalscore.FieldSkill:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaPcTechnicalScore fields.
func (ppts *PaPcTechnicalScore) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case papctechnicalscore.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ppts.ID = int(value.Int64)
		case papctechnicalscore.FieldPaPcID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pa_pc_id", values[i])
			} else if value.Valid {
				ppts.PaPcID = int(value.Int64)
			}
		case papctechnicalscore.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ppts.Type = papctechnicalscore.Type(value.String)
			}
		case papctechnicalscore.FieldSkill:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field skill", values[i])
			} else if value.Valid {
				ppts.Skill = value.String
			}
		case papctechnicalscore.FieldSelfScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field self_score", values[i])
			} else if value.Valid {
				ppts.SelfScore = float32(value.Float64)
			}
		case papctechnicalscore.FieldPeerScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field peer_score", values[i])
			} else if value.Valid {
				ppts.PeerScore = new(float32)
				*ppts.PeerScore = float32(value.Float64)
			}
		case papctechnicalscore.FieldManagerScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field manager_score", values[i])
			} else if value.Valid {
				ppts.ManagerScore = float32(value.Float64)
			}
		default:
			ppts.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PaPcTechnicalScore.
// This includes values selected through modifiers, order, etc.
func (ppts *PaPcTechnicalScore) Value(name string) (ent.Value, error) {
	return ppts.selectValues.Get(name)
}

// QueryPaPc queries the "pa_pc" edge of the PaPcTechnicalScore entity.
func (ppts *PaPcTechnicalScore) QueryPaPc() *PaPcQuery {
	return NewPaPcTechnicalScoreClient(ppts.config).QueryPaPc(ppts)
}

// Update returns a builder for updating this PaPcTechnicalScore.
// Note that you need to call PaPcTechnicalScore.Unwrap() before calling this method if this PaPcTechnicalScore
// was returned from a transaction, and the transaction was committed or rolled back.
func (ppts *PaPcTechnicalScore) Update() *PaPcTechnicalScoreUpdateOne {
	return NewPaPcTechnicalScoreClient(ppts.config).UpdateOne(ppts)
}

// Unwrap unwraps the PaPcTechnicalScore entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ppts *PaPcTechnicalScore) Unwrap() *PaPcTechnicalScore {
	_tx, ok := ppts.config.driver.(*txDriver)
	if !ok {
		panic("ent: PaPcTechnicalScore is not a transactional entity")
	}
	ppts.config.driver = _tx.drv
	return ppts
}

// String implements the fmt.Stringer.
func (ppts *PaPcTechnicalScore) String() string {
	var builder strings.Builder
	builder.WriteString("PaPcTechnicalScore(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ppts.ID))
	builder.WriteString("pa_pc_id=")
	builder.WriteString(fmt.Sprintf("%v", ppts.PaPcID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", ppts.Type))
	builder.WriteString(", ")
	builder.WriteString("skill=")
	builder.WriteString(ppts.Skill)
	builder.WriteString(", ")
	builder.WriteString("self_score=")
	builder.WriteString(fmt.Sprintf("%v", ppts.SelfScore))
	builder.WriteString(", ")
	if v := ppts.PeerScore; v != nil {
		builder.WriteString("peer_score=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("manager_score=")
	builder.WriteString(fmt.Sprintf("%v", ppts.ManagerScore))
	builder.WriteByte(')')
	return builder.String()
}

// PaPcTechnicalScores is a parsable slice of PaPcTechnicalScore.
type PaPcTechnicalScores []*PaPcTechnicalScore
